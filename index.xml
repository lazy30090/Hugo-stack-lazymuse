<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>lazymuse</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/</link>
        <description>Recent content on lazymuse</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>lazy</copyright>
        <lastBuildDate>Tue, 30 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://lazy30090.github.io/Hugo-stack-lazymuse/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Japanese Note</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/p/japanese-note/</link>
        <pubDate>Tue, 30 Sep 2025 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/p/japanese-note/</guid>
        <description>&lt;h1 id=&#34;day-1&#34;&gt;Day 1
&lt;/h1&gt;&lt;h2 id=&#34;1-动词时态过去式&#34;&gt;1. 动词时态：过去式
&lt;/h2&gt;&lt;h3 id=&#34;11-规则&#34;&gt;1.1 规则
&lt;/h3&gt;&lt;p&gt;日语动词的礼貌体 (ます形) 本身可以表达现在习惯或将来的动作。为了描述过去已经发生的动作，需要将词尾进行变换。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;肯定句 (做了某事)&lt;/strong&gt;: 将词尾的 ます 变为 &lt;strong&gt;ました&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;否定句 (没做某事)&lt;/strong&gt;: 将词尾的 ません 变为 &lt;strong&gt;ませんでした&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-范例&#34;&gt;1.2 范例
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将来&lt;/strong&gt;: 明日、パンを食べます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过去&lt;/strong&gt;: 昨日、パンを食べました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将来否定&lt;/strong&gt;: 明日、学校へ行きません。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过去否定&lt;/strong&gt;: 昨日、学校へ行きませんでした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-相关词汇&#34;&gt;1.3 相关词汇
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;今日 (きょう): 今天&lt;/li&gt;
&lt;li&gt;昨日 (きのう): 昨天&lt;/li&gt;
&lt;li&gt;明日 (あした): 明天&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-形容词系统&#34;&gt;2. 形容词系统
&lt;/h2&gt;&lt;h3 id=&#34;21-核心概念为何分为两类&#34;&gt;2.1 核心概念：为何分为两类？
&lt;/h3&gt;&lt;p&gt;日语的形容词分为 い形容词 和 な形容词 两大类，是因为它们的词源和语法功能完全不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;い形容词&lt;/strong&gt;: 是日语的“原生词汇”，自古以来就作为形容词使用，拥有类似动词的“活用”能力，即词尾本身可以变化来表达否定、过去等含义。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;な形容词&lt;/strong&gt;: 大多是源于中文的“汉字词”，本质上更像名词。它们自身无法变化，需要借助助词 な 或助动词 です 来发挥形容词的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-两类形容词的用法区别&#34;&gt;2.2 两类形容词的用法区别
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;场景&lt;/th&gt;
          &lt;th&gt;い形容词&lt;/th&gt;
          &lt;th&gt;な形容词&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;直接修饰名词&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;直接连接&lt;/strong&gt; おいしいパン&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;中间加 な&lt;/strong&gt; 静かな図書館&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;在句末作谓语&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;自身可独立&lt;/strong&gt; (です只为表礼貌) この映画は面白い。&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;必须和です/だ连用&lt;/strong&gt; 図書館は静かです。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;23-活用变形规则详解&#34;&gt;2.3 活用/变形规则详解
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类型&lt;/th&gt;
          &lt;th&gt;时态&lt;/th&gt;
          &lt;th&gt;肯定&lt;/th&gt;
          &lt;th&gt;否定&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;い形容词&lt;/strong&gt; (例: 面白い)&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;现在&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;面白いです&lt;/td&gt;
          &lt;td&gt;面白くないです&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;过去&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;面白かったです&lt;/td&gt;
          &lt;td&gt;面白くなかったです&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;な形容词&lt;/strong&gt; (例: 静か)&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;现在&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;静かです&lt;/td&gt;
          &lt;td&gt;静かじゃありません&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;过去&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;静かでした&lt;/td&gt;
          &lt;td&gt;静かじゃありませんでした&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;24-相关词汇&#34;&gt;2.4 相关词汇
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;い形容词&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;おいしい: 好吃的&lt;/li&gt;
&lt;li&gt;高い (たかい): 贵的, 高的&lt;/li&gt;
&lt;li&gt;新しい (あたらしい): 新的&lt;/li&gt;
&lt;li&gt;面白い (おもしろい): 有趣的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;な形容词&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;元気 (げんき): 健康的, 有活力的&lt;/li&gt;
&lt;li&gt;きれい: 漂亮的, 干净的&lt;/li&gt;
&lt;li&gt;静か (しずか): 安静的&lt;/li&gt;
&lt;li&gt;有名 (ゆうめい): 有名的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;名词及其他&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;この: 这个&lt;/li&gt;
&lt;li&gt;映画 (えいが): 电影&lt;/li&gt;
&lt;li&gt;図書館 (としょかん): 图书馆&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-助词-で-与-に&#34;&gt;3. 助词 で 与 に
&lt;/h2&gt;&lt;h3 id=&#34;31-助词-で&#34;&gt;3.1 助词 で
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;功能一：表示动作发生的场所&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;讲解&lt;/strong&gt;: で 用于标记一个动作在“哪里”发生，是动作的“舞台”。需要和表示移动目的地的 へ 区分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范例&lt;/strong&gt;: 私 は 図書館 で 勉強します。 - 我&lt;strong&gt;在&lt;/strong&gt;图书馆学习。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能二：表示方法、手段、工具&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;讲解&lt;/strong&gt;: で 用于标记完成一个动作所使用的“工具”或“方法”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范例&lt;/strong&gt;: バス で 会社 へ 行きます。 - 我&lt;strong&gt;坐&lt;/strong&gt;巴士去公司。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;32-助词-に&#34;&gt;3.2 助词 に
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;功能：标记动作发生的具体时间点&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;讲解&lt;/strong&gt;: に 像一个图钉，把动作精确地“钉”在某个时间点上，通常是带有数字的时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范例&lt;/strong&gt;: 朝、7時 に 起きます。 - 我早上&lt;strong&gt;在&lt;/strong&gt;7点起床。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重要提示&lt;/strong&gt;: 相对时间词如 今日 (今天), 昨日 (昨天) 等后面&lt;strong&gt;不加&lt;/strong&gt; に。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;33-相关词汇&#34;&gt;3.3 相关词汇
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;勉強します (べんきょうします): 学习&lt;/li&gt;
&lt;li&gt;バス: 巴士&lt;/li&gt;
&lt;li&gt;箸 (はし): 筷子&lt;/li&gt;
&lt;li&gt;7時 (しちじ): 7点&lt;/li&gt;
&lt;li&gt;起きます (おきます): 起床&lt;/li&gt;
&lt;li&gt;カフェ: 咖啡馆&lt;/li&gt;
&lt;li&gt;コーヒー: 咖啡&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-提问与回答&#34;&gt;4. 提问与回答
&lt;/h2&gt;&lt;h3 id=&#34;41-使用疑问词提问&#34;&gt;4.1 使用疑问词提问
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;讲解&lt;/strong&gt;: 用疑问词替换掉你想提问的部分，句末保留 か。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范例&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;原句: カフェでコーヒーを飲みます。&lt;/li&gt;
&lt;li&gt;问地点: どこでコーヒーを飲みますか。&lt;/li&gt;
&lt;li&gt;问对象: カフェで何を食べますか。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42-疑问词词汇&#34;&gt;4.2 疑问词词汇
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;何 (なに/なん): 什么&lt;/li&gt;
&lt;li&gt;どこ: 哪里&lt;/li&gt;
&lt;li&gt;いつ: 何时&lt;/li&gt;
&lt;li&gt;誰 (だれ): 谁&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>PCO Note Part I</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/p/pco-note-part-i/</link>
        <pubDate>Tue, 30 Sep 2025 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/p/pco-note-part-i/</guid>
        <description>&lt;h1 id=&#34;计算机组成原理第一章&#34;&gt;《计算机组成原理》第一章
&lt;/h1&gt;&lt;h2 id=&#34;11-计算机的基本概念&#34;&gt;1.1 计算机的基本概念
&lt;/h2&gt;&lt;h3 id=&#34;111-信息的数字化表示&#34;&gt;1.1.1 信息的数字化表示
&lt;/h3&gt;&lt;h4 id=&#34;1-基础二进制系统&#34;&gt;1. 基础：二进制系统
&lt;/h4&gt;&lt;p&gt;计算机内部的所有信息（数值、字符、图像、声音等）都必须转换为二进制序列进行存储和处理。选择二进制是基于以下三个根本原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;物理实现的简易性&lt;/strong&gt;：电子元器件（如晶体管）稳定地表示两种状态（如高/低电平、开/关）远比表示多种状态（如十进制的10种）更容易、可靠且成本更低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运算规则的简单性&lt;/strong&gt;：二进制的算术运算（加法、乘法）规则极少，这使得构建运算器（ALU）的逻辑电路设计大大简化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与逻辑运算的天然契合&lt;/strong&gt;：逻辑代数中的“真”和“假”两种状态，与二进制的“1”和“0”可以完美对应，为计算机处理逻辑判断提供了统一的基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-基本单位&#34;&gt;2. 基本单位
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;位 (bit)&lt;/strong&gt;：二进制数中的一位，是计算机中信息的最小单位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字节 (Byte)&lt;/strong&gt;：8个比特构成一个字节，是信息存储和传输的基本单位。1 Byte = 8 bits。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-各类信息的表示&#34;&gt;3. 各类信息的表示
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数值信息&lt;/strong&gt;：采用“按权展开”法表示。一个二进制数中，任意位置上的“1”所代表的数值是2的相应次幂。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非数值信息（字符）&lt;/strong&gt;：通过&lt;strong&gt;编码 (Encoding)&lt;/strong&gt; 方案，将字符与一个唯一的二进制数进行映射。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ASCII (美国信息交换标准代码)&lt;/strong&gt;：使用7位（后扩展为8位，即1字节）二进制数表示128（或256）个英文字符、数字和符号。这是最基础的西文编码方案。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unicode 与 UTF-8&lt;/strong&gt;：为解决ASCII无法表示多国语言文字的问题而诞生。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unicode&lt;/strong&gt;：一个全球统一的&lt;strong&gt;字符集&lt;/strong&gt;，为世界上每一种语言的每一个字符都分配了一个唯一的数字编号（码点）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UTF-8&lt;/strong&gt;：一种&lt;strong&gt;编码规则&lt;/strong&gt;，它将Unicode码点转换为实际存储的二进制序列。其特点是&lt;strong&gt;可变长度编码&lt;/strong&gt;，对ASCII字符用1字节表示（实现兼容），对汉字等常用字符用3字节表示，从而兼顾了空间效率和通用性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图像信息&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;像素化&lt;/strong&gt;：将图像分割为一个个像素点阵。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;颜色编码&lt;/strong&gt;：用二进制数记录每个像素的颜色信息。例如，24位真彩色使用3个字节（R/G/B各8位）表示一个像素的颜色，可表示约1677万种颜色。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;声音信息&lt;/strong&gt;：将连续的模拟声波数字化。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;采样&lt;/strong&gt;：在时间轴上以固定频率测量声波的振幅。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;量化&lt;/strong&gt;：将每次采样得到的振幅值近似为一个离散的整数，并用二进制编码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-数字代码的物理表示数字信号&#34;&gt;4. 数字代码的物理表示：数字信号
&lt;/h4&gt;&lt;p&gt;抽象的二进制代码最终需要通过物理信号在硬件电路中传输。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数字信号&lt;/strong&gt;：一种离散的、非连续的信号，其状态（如电压）在预定义的几个值之间跳变。对于二进制系统，信号只有两种状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;电平表示&lt;/strong&gt;：通过电路中的电压高低来对应二进制的&lt;code&gt;1&lt;/code&gt;和&lt;code&gt;0&lt;/code&gt;。例如，高电平（+3.3V）代表&lt;code&gt;1&lt;/code&gt;，低电平（0V）代表&lt;code&gt;0&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时序传输&lt;/strong&gt;：在计算机内部**时钟 (Clock)**信号的驱动下，二进制序列按位（bit）在信号线上传输。在每个时钟周期内，发送方输出一个高电平或低电平，接收方在同一时钟周期的特定时刻检测电平，从而还原出二进制序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;112-存储程序工作方式&#34;&gt;1.1.2 存储程序工作方式
&lt;/h3&gt;&lt;p&gt;这是现代计算机体系结构的灵魂，由冯·诺依曼提出，核心思想是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;将指令和数据以同等地位存放在存储器中，并可按地址寻访。计算机能自动地从存储器中取出指令并执行，直至程序结束。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这一思想带来了两大革命性变革：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自动化&lt;/strong&gt;：计算机可脱离人工干预，高速自动地完成复杂的计算任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通用性&lt;/strong&gt;：计算机的功能不再由其硬件固定，而是取决于加载到内存中的程序。这使得计算机成为一种通用的信息处理工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;113-计算机的分类&#34;&gt;1.1.3 计算机的分类
&lt;/h3&gt;&lt;p&gt;计算机可从不同维度进行分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;按处理能力/规模&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;超级计算机&lt;/strong&gt;：用于尖端科学计算，运算速度极快。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大型机&lt;/strong&gt;：用于处理大量数据和高并发事务，如银行、航空系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器&lt;/strong&gt;：为网络中的其他设备提供服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;个人计算机 (PC)&lt;/strong&gt;：通用桌面或便携式计算机。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;嵌入式计算机&lt;/strong&gt;：嵌入到特定设备中，执行专门功能的微型计算机。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按用途&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通用计算机&lt;/strong&gt;：可解决多种不同类型问题的计算机。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;专用计算机&lt;/strong&gt;：为特定应用领域设计，具有固定功能的计算机。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-计算机的诞生与发展&#34;&gt;1.2 计算机的诞生与发展
&lt;/h2&gt;&lt;h3 id=&#34;121-冯诺依曼体系结构&#34;&gt;1.2.1 冯·诺依曼体系结构
&lt;/h3&gt;&lt;p&gt;这是为实现“存储程序”思想而设计的硬件体系结构，规定计算机必须由五大基本部件组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;运算器 (ALU)&lt;/strong&gt;：执行算术运算和逻辑运算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制器 (CU)&lt;/strong&gt;：负责取指令、分析指令、发出控制信号，是计算机的指挥中心。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;中央处理器 (CPU)&lt;/strong&gt; 通常指运算器和控制器的集合体。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储器 (Memory)&lt;/strong&gt;：存放程序和数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入设备&lt;/strong&gt;：向计算机输入信息（如键盘、鼠标）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出设备&lt;/strong&gt;：向用户展示处理结果（如显示器、打印机）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;核心特点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以CPU为核心。&lt;/li&gt;
&lt;li&gt;指令和数据不加区分地存放在&lt;strong&gt;同一个&lt;/strong&gt;存储器中。&lt;/li&gt;
&lt;li&gt;指令和数据的存取都通过&lt;strong&gt;同一条&lt;/strong&gt;总线进行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;冯·诺依曼瓶颈 (Von Neumann Bottleneck)：&lt;/p&gt;
&lt;p&gt;由于CPU的运算速度远超存储器的访问速度，且指令和数据需共享同一条总线，导致CPU经常处于等待状态，系统整体性能受到存储器和总线速度的严重制约。主要的缓解方法是引入高速缓存 (Cache)，构建存储器层次结构。&lt;/p&gt;
&lt;h3 id=&#34;122-计算机发展历程&#34;&gt;1.2.2 计算机发展历程
&lt;/h3&gt;&lt;p&gt;计算机的发展以核心电子元器件的变革为标志，通常划分为四代：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一代 (1946-1957)&lt;/strong&gt;：&lt;strong&gt;电子管&lt;/strong&gt;。体积巨大、功耗高、可靠性差。代表：ENIAC。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二代 (1958-1964)&lt;/strong&gt;：&lt;strong&gt;晶体管&lt;/strong&gt;。体积、功耗、成本显著降低，可靠性提升。高级语言和操作系统雏形出现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三代 (1965-1970)&lt;/strong&gt;：&lt;strong&gt;中小规模集成电路 (IC)&lt;/strong&gt;。计算机进一步小型化，性能更强。出现系列化计算机。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第四代 (1971-至今)&lt;/strong&gt;：&lt;strong&gt;大规模/超大规模集成电路 (LSI/VLSI)&lt;/strong&gt;。催生了**微处理器 (Microprocessor)**和个人计算机 (PC) 的革命。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;123-未来的发展趋势&#34;&gt;1.2.3 未来的发展趋势
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;后摩尔定律时代&lt;/strong&gt;：性能提升从单纯依靠缩小晶体管尺寸，转向依赖更优的架构，如&lt;strong&gt;众核架构&lt;/strong&gt;和&lt;strong&gt;领域专用架构 (DSA)&lt;/strong&gt;（如GPU, NPU）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新型计算模型&lt;/strong&gt;：如&lt;strong&gt;量子计算&lt;/strong&gt;、&lt;strong&gt;类脑计算/神经形态计算&lt;/strong&gt;和&lt;strong&gt;生物计算&lt;/strong&gt;，旨在突破冯·诺依曼体系的限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算形态&lt;/strong&gt;：&lt;strong&gt;普适计算&lt;/strong&gt;和&lt;strong&gt;物联网 (IoT)&lt;/strong&gt;，使计算能力无处不在。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13-计算机系统的组织&#34;&gt;1.3 计算机系统的组织
&lt;/h2&gt;&lt;p&gt;一个完整的计算机系统由&lt;strong&gt;硬件系统&lt;/strong&gt;和&lt;strong&gt;软件系统&lt;/strong&gt;两部分组成。&lt;/p&gt;
&lt;h3 id=&#34;131-硬件系统&#34;&gt;1.3.1 硬件系统
&lt;/h3&gt;&lt;p&gt;计算机的物理实体集合，是软件运行的基础平台。一个典型的计算机硬件系统由以下主要部分构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;中央处理器 (CPU)&lt;/strong&gt;：计算机的“大脑”，是执行指令和处理数据的核心部件。内部主要包含：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;运算器 (ALU)&lt;/strong&gt;：负责算术运算和逻辑运算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制器 (CU)&lt;/strong&gt;：负责从内存取指令、译码并发出控制信号，指挥各部件协同工作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄存器 (Registers)&lt;/strong&gt;：CPU内部的高速存储单元，用于暂存指令、数据和地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储器系统 (Memory System)&lt;/strong&gt;：用于存放程序和数据，通常呈层次化结构：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高速缓存 (Cache)&lt;/strong&gt;：位于CPU和主存之间，容量小但速度极快，用于缓解“冯诺依曼瓶颈”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主存储器 (Main Memory)&lt;/strong&gt;：也称内存（RAM），是CPU能直接访问的存储空间，程序和数据在运行时必须调入内存。特点是易失性（断电后数据丢失）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;辅助存储器 (Secondary Storage)&lt;/strong&gt;：也称外存，如硬盘(HDD)、固态硬盘(SSD)，用于长期存储数据和程序。特点是非易失性（断电后数据不丢失）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主板 (Motherboard)&lt;/strong&gt;：一块大型电路板，是连接计算机所有硬件组件的骨架。它承载了CPU、内存插槽、扩展插槽（如PCIe），并提供了连接硬盘、电源和各种外部设备的接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入输出（I/O）设备&lt;/strong&gt;：计算机与外部世界交互的桥梁。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;输入设备&lt;/strong&gt;：用于向计算机输入信息，如键盘、鼠标、扫描仪、麦克风。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出设备&lt;/strong&gt;：用于向用户展示计算机的处理结果，如显示器、打印机、音箱。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;总线 (Bus)&lt;/strong&gt;：连接各个硬件部件并为其提供数据交换路径的公共通信干线。根据传输信息的不同，可分为：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据总线 (Data Bus)&lt;/strong&gt;：双向传输数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地址总线 (Address Bus)&lt;/strong&gt;：单向传输，由CPU发出，用于指定访存或I/O端口的地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制总线 (Control Bus)&lt;/strong&gt;：传输控制信号和时序信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;132-软件系统&#34;&gt;1.3.2 软件系统
&lt;/h3&gt;&lt;p&gt;为运行和管理计算机而编制的程序、数据和文档的总称。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统软件&lt;/strong&gt;：管理和控制硬件资源，为应用软件提供运行环境。最核心的是&lt;strong&gt;操作系统 (OS)&lt;/strong&gt;，其他还包括语言处理程序（编译器）、数据库管理系统等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用软件&lt;/strong&gt;：为满足用户特定需求而开发的程序，如办公软件、浏览器、游戏等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;133-计算机系统层次结构&#34;&gt;1.3.3 计算机系统层次结构
&lt;/h3&gt;&lt;p&gt;为了管理计算机的复杂性，计算机系统被组织成一个多层次的结构。每一层都建立在更低一层之上，并向更高一层提供服务，同时隐藏底层实现细节。&lt;/p&gt;
&lt;p&gt;一个典型的简化层次模型如下（从下至上）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;硬件层&lt;/strong&gt;：物理设备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;机器语言层&lt;/strong&gt;：硬件能直接执行的二进制指令。是软硬件的&lt;strong&gt;接口&lt;/strong&gt;，该接口的具体规范称为&lt;strong&gt;指令集体系结构 (Instruction Set Architecture, ISA)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统层&lt;/strong&gt;：对硬件功能进行抽象和扩展，管理系统资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高级语言层&lt;/strong&gt;：程序员使用的编程语言，由编译器/解释器翻译成机器语言。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用软件层&lt;/strong&gt;：用户直接交互的程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;分层优势&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解耦 (Decoupling)&lt;/strong&gt;：实现了软硬件的独立发展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可移植性 (Portability)&lt;/strong&gt;：软件可在遵循相同接口的不同硬件上运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兼容性 (Compatibility)&lt;/strong&gt;：新硬件只要遵循旧的ISA，就能运行旧的软件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;14-计算机性能的主要评价指标&#34;&gt;1.4 计算机性能的主要评价指标
&lt;/h2&gt;&lt;h4 id=&#34;1-根本指标执行时间&#34;&gt;1. 根本指标：执行时间
&lt;/h4&gt;&lt;p&gt;完成特定任务所耗费的时间（响应时间）。&lt;strong&gt;时间越短，性能越好&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;2-cpu性能公式&#34;&gt;2. CPU性能公式
&lt;/h4&gt;&lt;p&gt;一个程序在CPU上的执行时间由以下三个因素决定：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CPU执行时间 = 指令数 (IC) × 每条指令的平均时钟周期数 (CPI) × 时钟周期时间&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;也可以表示为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CPU执行时间 = (指令数 × CPI) / 时钟频率&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;指令数 (IC)&lt;/strong&gt;：完成程序所需的机器指令总数。受&lt;strong&gt;算法&lt;/strong&gt;和&lt;strong&gt;编译器&lt;/strong&gt;优化水平影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPI (Cycles Per Instruction)&lt;/strong&gt;：执行一条指令平均耗费的时钟周期数。反映了&lt;strong&gt;CPU微架构&lt;/strong&gt;的设计水平，是衡量CPU设计优劣的核心指标。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时钟频率 (主频)&lt;/strong&gt;：CPU的时钟速度，单位Hz。反映了&lt;strong&gt;硬件制造工艺&lt;/strong&gt;水平。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此公式表明，&lt;strong&gt;高主频不完全等同于高性能&lt;/strong&gt;。一个低主频但CPI更低的CPU，其性能可能超过一个高主频但CPI更高的CPU。&lt;/p&gt;
&lt;h4 id=&#34;3-其他常用指标&#34;&gt;3. 其他常用指标
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MIPS (Million Instructions Per Second)&lt;/strong&gt;：每秒执行百万条指令数。易受指令集复杂度影响，不适合跨架构比较。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FLOPS (Floating-Point Operations Per Second)&lt;/strong&gt;：每秒执行的浮点运算次数。衡量科学计算性能的关键指标。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基准测试程序 (Benchmark)&lt;/strong&gt;：通过运行一套标准的、公认的测试程序集（如SPEC），来实际测量并综合评价计算机系统在真实应用场景下的性能，是目前最可靠的性能评价方法。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>How to write Hugo Stack articles?</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/p/how-to-write-hugo-stack-articles/</link>
        <pubDate>Tue, 23 Sep 2025 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/p/how-to-write-hugo-stack-articles/</guid>
        <description>&lt;h3 id=&#34;页面包组织&#34;&gt;页面包组织
&lt;/h3&gt;&lt;p&gt;通常，一篇文章只有一个 Markdown 文件（例如 &lt;code&gt;my-first-post.md&lt;/code&gt;）。但如果想给这篇文章配图，就需要把图片和 Markdown 文件放在同一个文件夹里，然后将这个文件夹作为一个“页面包”来处理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;页面包&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── post
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── my-first-post
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── index.md  # 关键：内容文件名为 index.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── image1.png
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        └── image2.png
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在这个结构中，&lt;code&gt;my-first-post&lt;/code&gt; 文件夹就是一个页面包。Hugo 会把这个文件夹里的所有文件（包括 &lt;code&gt;index.md&lt;/code&gt; 和所有图片）都看作是 &lt;code&gt;my-first-post&lt;/code&gt; 这篇文章的一部分。&lt;code&gt;index.md&lt;/code&gt; 是这个页面的主要内容文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;插入图片&#34;&gt;插入图片
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;### 插入单张图片
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;这是第一张图片，展示了我的工作环境：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![我的工作环境](image1.jpg)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;### 插入多张图片（图片库）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;通过在页面包中放入多张图片并用 Markdown 语法列出它们，Stack 主题可以自动生成图片库。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![这是一张图片](image1.jpg)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![这是另一张图片](image2.png)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Archives</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>About</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/about/</link>
        <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/about/</guid>
        <description>&lt;p&gt;还没有想好写什么，暂定。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Links</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/links/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/links/</guid>
        <description>&lt;p&gt;To use this feature, add &lt;code&gt;links&lt;/code&gt; section to frontmatter.&lt;/p&gt;
&lt;p&gt;This page&amp;rsquo;s frontmatter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub is the world&amp;#39;s largest software development platform.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://www.typescriptlang.org&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ts-logo-128.jpg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;image&lt;/code&gt; field accepts both local and external images.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Search</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
