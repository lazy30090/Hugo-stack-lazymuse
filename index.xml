<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>lazymuse</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/</link>
        <description>Recent content on lazymuse</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>lazy</copyright>
        <lastBuildDate>Sun, 12 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://lazy30090.github.io/Hugo-stack-lazymuse/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Computer Organization Note Part IV</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-part-iv/</link>
        <pubDate>Sun, 12 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-part-iv/</guid>
        <description>&lt;h2 id=&#34;引言指令与指令系统&#34;&gt;引言：指令与指令系统
&lt;/h2&gt;&lt;h3 id=&#34;1-计算机中的信息分类&#34;&gt;1. 计算机中的信息分类
&lt;/h3&gt;&lt;p&gt;计算机是处理信息的工具，其内部处理的信息可以分为两大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据型信息 (Data)&lt;/strong&gt;: 这是计算机程序加工和处理的对象。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数值型数据&lt;/strong&gt;: 如整数、浮点数，用于算术运算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非数值型数据&lt;/strong&gt;: 如字符、字符串、逻辑值，用于逻辑判断和人机交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制型信息 (Control)&lt;/strong&gt;: 这是指导计算机如何操作的命令。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;指令 (Instruction)&lt;/strong&gt;: 宏观层面上，CPU能够识别和执行的命令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微命令 (Micro-command)&lt;/strong&gt;: 微观层面上，构成一条指令的更基本、更底层的控制信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-计算机的工作步骤&#34;&gt;2. 计算机的工作步骤
&lt;/h3&gt;&lt;p&gt;计算机的运行本质上就是周而复始地执行指令序列，其基本工作流程包含三个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;取指令 (Instruction Fetch)&lt;/strong&gt;: CPU根据程序计数器 (PC) 的指示，从主存储器中取出下一条要执行的指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行指令 (Instruction Execute)&lt;/strong&gt;: CPU对指令进行译码，并根据指令要求执行相应的操作（如算术逻辑运算）。在此过程中，可能还需要从主存或寄存器中获取操作数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存放结果 (Store Result)&lt;/strong&gt;: 将执行指令后得到的结果写回到主存或寄存器中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-指令与指令系统的定义&#34;&gt;3. 指令与指令系统的定义
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;指令 (Instruction)&lt;/strong&gt;: 指示计算机执行某种操作的命令。它是一系列按照特定格式排列的二进制代码，CPU可以识别并执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;指令系统 (Instruction Set) / 指令集架构 (ISA)&lt;/strong&gt;: 一台计算机所能识别和执行的&lt;strong&gt;全部指令的集合&lt;/strong&gt;。它是计算机硬件功能与软件之间的接口，直接反映了CPU所具备的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;21-指令格式&#34;&gt;2.1 指令格式
&lt;/h2&gt;&lt;p&gt;指令格式定义了指令的二进制结构，即哪些位代表什么含义。&lt;/p&gt;
&lt;h3 id=&#34;1-指令基本格式&#34;&gt;1. 指令基本格式
&lt;/h3&gt;&lt;p&gt;一条指令通常包含两部分核心信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作码 (Opcode, OP)&lt;/strong&gt;: 指定了该指令要执行的&lt;strong&gt;操作类型&lt;/strong&gt;，如加法、减法、数据传送等。&lt;strong&gt;一条指令中有且仅有一个操作码&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地址码 (Address, AD)&lt;/strong&gt;: 指定了参与操作的&lt;strong&gt;操作数的位置&lt;/strong&gt;或指令执行后&lt;strong&gt;结果的存放位置&lt;/strong&gt;。一条指令中可以有0个、1个、2个或3个地址码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;基本格式:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------+-----------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|   操作码 OP   |     地址码 A     |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------+-----------------+
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;2-指令字长&#34;&gt;2. 指令字长
&lt;/h3&gt;&lt;p&gt;指令字长是指一条指令所占用的二进制位数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 指令字长越长，可以包含更复杂的操作码和更多的地址信息，从而使指令功能更丰富。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;: 指令字长越长，会占用更多的存储空间，并且从主存中取指令需要更长的时间，这会降低指令的执行速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“瓶颈”问题&lt;/strong&gt;: CPU的内部处理速度远快于访问主存储器的速度。例如，一个2GHz的CPU，其内部操作周期约为0.5纳秒 (ns)，而访问一次主存可能需要5纳秒 (ns)，速度相差一个数量级。因此，频繁地访问主存（如取长指令）会成为性能瓶颈。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;3-操作码结构&#34;&gt;3. 操作码结构
&lt;/h3&gt;&lt;p&gt;操作码的位数决定了指令系统能支持多少种不同的操作。&lt;/p&gt;
&lt;h4 id=&#34;1-定长操作码&#34;&gt;(1) 定长操作码
&lt;/h4&gt;&lt;p&gt;所有指令的操作码都具有相同的长度和固定的位置（通常在指令的最高位部分）。这种方式译码简单，但可能会限制指令总数或浪费指令空间。&lt;/p&gt;
&lt;h4 id=&#34;2-扩展操作码&#34;&gt;(2) 扩展操作码
&lt;/h4&gt;&lt;p&gt;指令字长固定，但操作码的长度可变。其核心思想是，让地址码较少的指令拥有更长的操作码，从而在不增加指令总长度的前提下，支持更多的指令类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;: 假设指令字长为16位，地址码每个占4位。设计一个支持15条三地址指令、15条二地址指令、15条一地址指令和16条零地址指令的系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;三地址指令 (15条)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OP(4位) | A1(4位) | A2(4位) | A3(4位)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;操作码 &lt;code&gt;0000&lt;/code&gt; 到 &lt;code&gt;1110&lt;/code&gt; (15条)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1111&lt;/code&gt; 作为&lt;strong&gt;扩展标志&lt;/strong&gt;，表示这不是一条三地址指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二地址指令 (15条)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1111 | OP&#39;(4位) | A1(4位) | A2(4位)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;前4位 &lt;code&gt;1111&lt;/code&gt; 表示扩展。&lt;/li&gt;
&lt;li&gt;OP&amp;rsquo; 从 &lt;code&gt;0000&lt;/code&gt; 到 &lt;code&gt;1110&lt;/code&gt; (15条)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1111 1111&lt;/code&gt; 作为下一级的扩展标志。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一地址指令 (15条)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1111 | 1111 | OP&#39;&#39;(4位) | A1(4位)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;前8位 &lt;code&gt;1111 1111&lt;/code&gt; 表示扩展。&lt;/li&gt;
&lt;li&gt;OP&amp;rsquo;&amp;rsquo; 从 &lt;code&gt;0000&lt;/code&gt; 到 &lt;code&gt;1110&lt;/code&gt; (15条)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1111 1111 1111&lt;/code&gt; 作为下一级的扩展标志。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;零地址指令 (16条)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1111 | 1111 | 1111 | OP&#39;&#39;&#39;(4位)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;前12位 &lt;code&gt;1111 1111 1111&lt;/code&gt; 表示扩展。&lt;/li&gt;
&lt;li&gt;OP&amp;rsquo;&amp;rsquo;&amp;rsquo; 从 &lt;code&gt;0000&lt;/code&gt; 到 &lt;code&gt;1111&lt;/code&gt; (16条)，这里不再需要扩展标志，所以4位可以全部用来编码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-方式码&#34;&gt;(3) 方式码
&lt;/h4&gt;&lt;p&gt;将操作码字段划分为几个部分，每个部分代表一种操作属性或方式。例如，一个算术逻辑指令的操作码可以分为：基本操作、是否影响进位、是否移位、结果是否回送等部分。&lt;/p&gt;
&lt;h3 id=&#34;4-指令中的地址结构&#34;&gt;4. 指令中的地址结构
&lt;/h3&gt;&lt;h4 id=&#34;1-操作数的位置&#34;&gt;(1) 操作数的位置
&lt;/h4&gt;&lt;p&gt;操作数可以存放在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU内部寄存器&lt;/strong&gt;: 访问速度最快。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主存储器 (包括Cache)&lt;/strong&gt;: 速度次之。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外存&lt;/strong&gt;: 速度最慢，CPU不能直接访问，需先调入内存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;堆栈 (Stack)&lt;/strong&gt;: 一种特殊的内存区域，按“后进先出”(LIFO)原则组织数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-显地址与隐地址&#34;&gt;(2) 显地址与隐地址
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;显地址 (Explicit Address)&lt;/strong&gt;: 在指令中明确地给出了操作数的地址（如内存单元号或寄存器编号）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隐地址 (Implicit Address)&lt;/strong&gt;: 指令中不给出地址，而是通过系统事先的约定来确定操作数的位置。例如，约定累加器(AC)总是作为其中一个操作数和结果的存放地。使用隐地址是&lt;strong&gt;简化地址结构、缩短指令长度&lt;/strong&gt;的基本途径。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-按地址码数量分类&#34;&gt;(3) 按地址码数量分类
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;四地址指令&lt;/strong&gt;: &lt;code&gt;OP | A1 | A2 | A3 | A4&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;功能: &lt;code&gt;(A1) OP (A2) -&amp;gt; A3&lt;/code&gt;, &lt;code&gt;下一条指令在A4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;非常罕见，因为程序通常是顺序执行的，A4大部分情况下是多余的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三地址指令&lt;/strong&gt;: &lt;code&gt;OP | A1 | A2 | A3&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;功能: &lt;code&gt;(A1) OP (A2) -&amp;gt; A3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下一条指令地址由&lt;strong&gt;程序计数器(PC)&lt;/strong&gt; 隐含提供: &lt;code&gt;(PC) + n -&amp;gt; PC&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二地址指令&lt;/strong&gt;: &lt;code&gt;OP | A1 | A2&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;功能: &lt;code&gt;(A1) OP (A2) -&amp;gt; A1&lt;/code&gt; (或 A2)。结果覆盖其中一个操作数。&lt;/li&gt;
&lt;li&gt;这是最常见的指令格式之一，如 &lt;code&gt;ADD AX, BX&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一地址指令&lt;/strong&gt;: &lt;code&gt;OP | A1&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;双操作数指令&lt;/strong&gt;: 一个操作数在A1，另一个操作数隐含在累加器(AC)中。功能: &lt;code&gt;(A1) OP (AC) -&amp;gt; AC&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单操作数指令&lt;/strong&gt;: 只对A1处的一个操作数进行操作。功能: &lt;code&gt;OP(A1) -&amp;gt; A1&lt;/code&gt;，如 &lt;code&gt;NOT BL&lt;/code&gt; (按位取反)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;零地址指令&lt;/strong&gt;: &lt;code&gt;OP&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;不含地址码。操作数通常隐含在&lt;strong&gt;堆栈的顶部&lt;/strong&gt;。例如，&lt;code&gt;PUSH&lt;/code&gt; 和 &lt;code&gt;POP&lt;/code&gt; 指令。&lt;/li&gt;
&lt;li&gt;也包括一些不需要操作数的指令，如 &lt;code&gt;NOP&lt;/code&gt; (空操作) 和 &lt;code&gt;HLT&lt;/code&gt; (停机)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-指令寻址方式-重点与难点&#34;&gt;2.2 指令寻址方式 (重点与难点)
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;寻址方式&lt;/strong&gt;定义了指令中的地址码字段应该如何解释，以最终找到所需的操作数。### 四大类寻址方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;立即寻址&lt;/strong&gt;: 指令中直接包含操作数本身。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;直接寻址类&lt;/strong&gt;: 指令中直接给出操作数的地址（主存单元号或寄存器号）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;间接寻址类&lt;/strong&gt;: 指令中给出的是一个地址指针，需要通过该指针再次访问才能找到操作数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;变址类&lt;/strong&gt;: 指令中给出的地址需要和某个寄存器的内容相加，才能得到最终的有效地址。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;详细解析各种寻址方式&#34;&gt;详细解析各种寻址方式
&lt;/h3&gt;&lt;h4 id=&#34;1-立即寻址-immediate-addressing&#34;&gt;(1) 立即寻址 (Immediate Addressing)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;: 地址码字段给出的不是地址，而是&lt;strong&gt;操作数本身&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 取出指令的同时就获得了操作数，无需再次访存，速度快。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;: 操作数大小受到地址码位数的限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;: &lt;code&gt;MOV AX, 1234H&lt;/code&gt; (将立即数&lt;code&gt;1234H&lt;/code&gt;送入AX寄存器)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-直接寻址类&#34;&gt;(2) 直接寻址类
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主存直接寻址&lt;/strong&gt;: 指令中直接给出操作数在&lt;strong&gt;主存中的有效地址&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 简单直观。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;: 地址码位数决定了可寻址空间的大小，灵活性差。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关系&lt;/strong&gt;: &lt;code&gt;操作数 = (A)&lt;/code&gt;，其中 A 是指令中给出的地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;: &lt;code&gt;MOV AX, [2000H]&lt;/code&gt; (将内存地址&lt;code&gt;2000H&lt;/code&gt;单元的内容送入AX)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄存器寻址&lt;/strong&gt;: 指令中直接给出操作数所在的&lt;strong&gt;寄存器编号&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 无需访问主存，速度极快；寄存器数量少，地址码短，指令长度也短。这是现代CPU提高性能的重要手段。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关系&lt;/strong&gt;: &lt;code&gt;操作数 = (Ri)&lt;/code&gt;，其中 Ri 是指令中指定的寄存器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;: &lt;code&gt;MOV AX, BX&lt;/code&gt; (将BX寄存器的内容送入AX)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-间接寻址类&#34;&gt;(3) 间接寻址类
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主存间接寻址&lt;/strong&gt;: 指令中给出的地址是&lt;strong&gt;存放操作数地址的内存单元的地址&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;过程&lt;/strong&gt;: 需要两次访问主存才能获得操作数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 扩大了寻址范围（地址码位数不变，但可以指向更大的地址空间），便于编程（如实现指针）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关系&lt;/strong&gt;: &lt;code&gt;有效地址 = (A)&lt;/code&gt;, &lt;code&gt;操作数 = ((A))&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;: 指令地址码为&lt;code&gt;2000H&lt;/code&gt;，&lt;code&gt;2000H&lt;/code&gt;单元内容为&lt;code&gt;3000H&lt;/code&gt;，&lt;code&gt;3000H&lt;/code&gt;单元内容为&lt;code&gt;AC00H&lt;/code&gt;。最终得到的操作数是&lt;code&gt;AC00H&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄存器间接寻址&lt;/strong&gt;: 指令中给出寄存器编号，该&lt;strong&gt;寄存器中存放的是操作数的有效地址&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;过程&lt;/strong&gt;: 访问1次寄存器和1次主存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 结合了寄存器寻址的速度和间接寻址的灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关系&lt;/strong&gt;: &lt;code&gt;有效地址 = (Ri)&lt;/code&gt;, &lt;code&gt;操作数 = ((Ri))&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;: &lt;code&gt;MOV AX, [BX]&lt;/code&gt; (将DS段中，由BX寄存器内容所指向的内存单元的数据送入AX)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自增/自减型寄存器间址&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自增型 &lt;code&gt;(R)+&lt;/code&gt;&lt;/strong&gt;: 先按寄存器内容寻址，获取操作数后，再将寄存器内容自动加1（或一个字长）。常用于处理连续数据块。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自减型 &lt;code&gt;-(R)&lt;/code&gt;&lt;/strong&gt;: 先将寄存器内容自动减1（或一个字长），再按新的寄存器内容寻址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;堆栈寻址&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;操作数隐含在堆栈顶部。地址由&lt;strong&gt;堆栈指针寄存器(SP)&lt;/strong&gt; 给出。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;压栈 (PUSH)&lt;/strong&gt;: &lt;code&gt;(SP) - 1 -&amp;gt; SP&lt;/code&gt;, &lt;code&gt;数据 -&amp;gt; ((SP))&lt;/code&gt; (先移动指针，再存数据)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;弹栈 (POP)&lt;/strong&gt;: &lt;code&gt;数据 &amp;lt;- ((SP))&lt;/code&gt;, &lt;code&gt;(SP) + 1 -&amp;gt; SP&lt;/code&gt; (先取数据，再移动指针)。&lt;/li&gt;
&lt;li&gt;这是一种特殊的寄存器间址方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-变址类-地址计算&#34;&gt;(4) 变址类 (地址计算)
&lt;/h4&gt;&lt;p&gt;这类寻址方式的&lt;strong&gt;有效地址 (EA)&lt;/strong&gt; 是由指令中给出的&lt;strong&gt;形式地址D&lt;/strong&gt;和某个寄存器的内容计算得出的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;变址寻址&lt;/strong&gt;: &lt;code&gt;EA = (Rx) + D&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rx&lt;/strong&gt;: 变址寄存器 (如SI, DI)，内容可变，通常用于访问数组或字符串中的元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;D&lt;/strong&gt;: 形式地址，是基准量，固定不变。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;面向用户&lt;/strong&gt;，用于处理成批数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;: &lt;code&gt;MOV AX, 10H[SI]&lt;/code&gt; (EA = (SI) + 10H)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;23-指令类型&#34;&gt;2.3 指令类型
&lt;/h2&gt;&lt;h3 id=&#34;1-指令分类方法&#34;&gt;1. 指令分类方法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;按指令格式分类&lt;/strong&gt;: 双操作数、单操作数指令等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按寻址方式分类&lt;/strong&gt;: RR型 (寄存器-寄存器)、RX型 (寄存器-内存) 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按指令功能分类&lt;/strong&gt;: 这是最常用、最重要的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-按功能分类的指令&#34;&gt;2. 按功能分类的指令
&lt;/h3&gt;&lt;h4 id=&#34;1-传送类指令&#34;&gt;(1) 传送类指令
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一般传送指令 (MOV, LOAD, STORE)&lt;/strong&gt;: 在寄存器之间、寄存器与内存之间、内存与内存之间（通常不直接支持）传送数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;堆栈指令 (PUSH, POP)&lt;/strong&gt;: 对堆栈进行压入和弹出操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据交换指令 (XCHG)&lt;/strong&gt;: 交换两个操作数的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-输入输出-io-指令&#34;&gt;(2) 输入/输出 (I/O) 指令
&lt;/h4&gt;&lt;p&gt;用于主机与外设之间的数据交换，本质上也是一种传送指令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;外围设备编址方式&lt;/strong&gt;:
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;单独编址 (Isolated I/O)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;I/O设备拥有独立的地址空间，称为&lt;strong&gt;端口地址&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;需要专用的I/O指令 (如 &lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;OUT&lt;/code&gt;) 来访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: I/O操作与内存操作易于区分，不占用内存地址空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;: 需要额外的控制信号线 (I/O Read, I/O Write)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;统一编址 (Memory-Mapped I/O)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;将I/O设备的接口寄存器看作主存单元，分配主存地址。&lt;/li&gt;
&lt;li&gt;可以使用通用的数据传送指令 (如 &lt;code&gt;MOV&lt;/code&gt;) 来访问I/O设备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 指令类型更少，寻址方式更灵活。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;: 占用主存地址空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O指令的设置方法&lt;/strong&gt;:
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;设置专用I/O指令&lt;/strong&gt;: 对应单独编址方式，如 &lt;code&gt;IN AL, 20H&lt;/code&gt; (从端口20H读一字节到AL)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;采用通用数据传送指令&lt;/strong&gt;: 对应统一编址方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过I/O处理器&lt;/strong&gt;: CPU向I/O处理器发送通用的命令字，由I/O处理器解释并执行具体的外设操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Computer Organization Note Part III</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-part-iii/</link>
        <pubDate>Sat, 11 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-part-iii/</guid>
        <description>&lt;h1 id=&#34;计算机组成原理卡诺图&#34;&gt;《计算机组成原理》：卡诺图
&lt;/h1&gt;&lt;p&gt;概念回顾（为什么用卡诺图）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卡诺图是一种以图形方式表示 n 变量逻辑函数最小项（minterm）并进行化简的方法。&lt;/li&gt;
&lt;li&gt;通过把逻辑上“相邻”的最小项在几何位置上也安排相邻，可以直观地找到可以合并的项（消去变量），从而得到更简的与-或（积之和）形式。&lt;/li&gt;
&lt;li&gt;目标：用尽可能少、尽可能大的“卡诺圈”覆盖所有值为 1 的小格，得到最简或接近最简的表达式（最小项数量少、每项变量数少、并考虑成本与实现）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;基本规则必须完全掌握&#34;&gt;基本规则（必须完全掌握）
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;格子与编号&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;n 变量共有 &lt;code&gt;2^n&lt;/code&gt; 个最小项，对应 &lt;code&gt;2^n&lt;/code&gt; 个小方格。格子的二进制标号按 &lt;strong&gt;格雷码（Gray code）&lt;/strong&gt; 排列（使相邻格子的编号只有一位不同）。&lt;/li&gt;
&lt;li&gt;常见布局：
&lt;ul&gt;
&lt;li&gt;2 变量：2×2；&lt;/li&gt;
&lt;li&gt;3 变量：2 行×4 列（行表示最高位，列为两低位的格雷码顺序 00,01,11,10）；&lt;/li&gt;
&lt;li&gt;4 变量：4 行×4 列（行、列均为两位格雷码：00,01,11,10）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;圈的大小&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;只能圈 &lt;code&gt;2^k&lt;/code&gt;（k = 0,1,2,&amp;hellip;）个相邻格子（即 1、2、4、8…）。&lt;/li&gt;
&lt;li&gt;圈必须是矩形（允许正方形）并且边界可“环绕”（图两边相邻，称 wrap-around），例如最左列与最右列相邻；最上行与最下行相邻。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;圈的原则&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;优先圈 &lt;strong&gt;尽可能大的&lt;/strong&gt; 2^k 个相邻的 &lt;code&gt;1&lt;/code&gt;（越大消去的变量越多）。&lt;/li&gt;
&lt;li&gt;每一个 &lt;code&gt;1&lt;/code&gt; 必须至少被&lt;strong&gt;一个&lt;/strong&gt;圈覆盖（但每个 &lt;code&gt;1&lt;/code&gt; 可以被多个圈覆盖）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个圈至少要包含一个“独立的 1”&lt;/strong&gt;（essential 1/独立 1），否则该圈可能是多余的（避免多余项）。&lt;/li&gt;
&lt;li&gt;圈的数量应尽可能少，且尽可能覆盖更多 &lt;code&gt;1&lt;/code&gt;（使表达式项数最少）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如何从圈得到乘积项（与项）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;在圈中，找出在圈内不发生变化（始终为 0 或始终为 1）的变量。&lt;/li&gt;
&lt;li&gt;若变量在圈内恒为 1，则在乘积项中保留该变量（原变量）；若恒为 0，则在乘积项中保留该变量的反（补）形式；若变量在圈内既 0 又 1（发生变化），则该变量在乘积项中被&lt;strong&gt;消去&lt;/strong&gt;（不出现）。&lt;/li&gt;
&lt;li&gt;最后把所有圈得到的乘积项作或（相加）就是化简后的与-或式（积之和）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;don&#39;t-care&lt;/code&gt;（无关项）的处理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;don&#39;t-care&lt;/code&gt;（通常用 &lt;code&gt;d&lt;/code&gt; 表示）是指某些输入组合在实际应用中不会出现或其输出不关心，这些格子在 K 图中既可以按 1 看待也可以按 0 看待，用来&lt;strong&gt;帮助形成更大的圈&lt;/strong&gt;以获得更简的解。&lt;/li&gt;
&lt;li&gt;规则：在圈时&lt;strong&gt;可以把 d 当作 1 使用以扩大圈&lt;/strong&gt;，但最终表达式不需要为 d 单独输出（即不强制要求包含 d）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最简式可能不唯一&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;不同的圈法可能产生不同但等价的最简表达式；因此出现多解是正常的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;实操要点--易错点总结&#34;&gt;实操要点 / 易错点（总结）
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;列/行必须按 &lt;strong&gt;格雷码&lt;/strong&gt; 排列（否则相邻概念失效）。&lt;/li&gt;
&lt;li&gt;圈只能是 2 的次方个格子，且要成矩形（不能 L 形）。&lt;/li&gt;
&lt;li&gt;圈可以重叠；合理重叠能减少项数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; 必须被覆盖，但不要为了覆盖而生成冗余的圈（优先圈必需的“本质素蕴涵项”）。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;don&#39;t-care&lt;/code&gt; 时小心：把 d 当 1 用是为了简化，但如果不必要就不要把它当 1；d 的使用只为取得更大圈、更多消去变量。&lt;/li&gt;
&lt;li&gt;最后要逐个最小项核对（用代数或真值表）确保化简后的表达式覆盖所有原始为 1 的输入。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;例子-1--3-变量最直接说明圈与结果的规则&#34;&gt;例子 1 — &lt;strong&gt;3 变量&lt;/strong&gt;（最直接、说明圈与结果的规则）
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：令三个变量为 &lt;code&gt;A,B,C&lt;/code&gt;（A 为最高位）。
设函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;F(A,B,C) = Σ m(1,3,5,7)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;（即当输入为 001、011、101、111 时输出为 1）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;画 3-变量 K 图（2 行 × 4 列），列的 BC 顺序为 &lt;code&gt;00,01,11,10&lt;/code&gt;（格雷码），行 A 为 &lt;code&gt;0&lt;/code&gt;（上）与 &lt;code&gt;1&lt;/code&gt;（下）。&lt;/li&gt;
&lt;li&gt;标出 1 的格子：m1(001)、m3(011)、m5(101)、m7(111) —— 这四个格子恰好是**两列的同一列（列对应 C=1）**的上下两个单元：实际上这 4 个都是 C = 1 的组合（不论 A、B 为何）。&lt;/li&gt;
&lt;li&gt;围成&lt;strong&gt;一个 4 格的列圈&lt;/strong&gt;（最大可能），该圈覆盖所有四个 1。&lt;/li&gt;
&lt;li&gt;从圈中看变量不变的：&lt;code&gt;C&lt;/code&gt; 在圈中恒为 &lt;code&gt;1&lt;/code&gt;（列固定），而 &lt;code&gt;A&lt;/code&gt;、&lt;code&gt;B&lt;/code&gt; 在圈内变化（被消去）。&lt;/li&gt;
&lt;li&gt;因此乘积项为 &lt;code&gt;C&lt;/code&gt;。 最终：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;F = C
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结论/说明&lt;/strong&gt;：这个例子演示了“把尽可能多的 1 包成大圈”能直接消去多数变量，得到极简表达式。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;例子-2--4-变量含-dont-care-的实用示例说明如何利用-d-扩大圈并得到更少的项&#34;&gt;例子 2 — &lt;strong&gt;4 变量&lt;/strong&gt;（含 &lt;code&gt;don&#39;t-care&lt;/code&gt; 的实用示例：说明如何利用 d 扩大圈并得到更少的项）
&lt;/h2&gt;&lt;p&gt;设 4 个变量为 &lt;code&gt;A,B,C,D&lt;/code&gt;（&lt;code&gt;AB&lt;/code&gt; 行、&lt;code&gt;CD&lt;/code&gt; 列，行/列的顺序均为格雷码 &lt;code&gt;00,01,11,10&lt;/code&gt;）。
定义函数（示例）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;F(A,B,C,D) = Σ m(0,2,5,7,8,10)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;don&amp;#39;t-care d = Σ m(1,3,9,11)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;1-把最小项与-d-填入-k-图表格化表示&#34;&gt;1) 把最小项与 d 填入 K 图（表格化表示）
&lt;/h3&gt;&lt;p&gt;下面给出 K-map 的排列（行 = AB：00 / 01 / 11 / 10；列 = CD：00 / 01 / 11 / 10）并标注 minterm 编号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;K-map index layout (rows AB, cols CD):
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       CD
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       00   01   11   10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00     m0   m1   m3   m2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;01     m4   m5   m7   m6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;11     m12  m13  m15  m14
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;10     m8   m9   m11  m10
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;将给定的 1 / d 填入（X 表示 1， d 表示 don&amp;rsquo;t-care，空白为 0）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       CD
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       00   01   11   10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00     X    d    d    X     (m0=1, m1=d, m3=d, m2=1)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;01     .    X    X    .     (m4=., m5=1, m7=1, m6=.)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;11     .    .    .    .     (m12..m15 all 0 / not used here)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;10     X    d    d    X     (m8=1, m9=d, m11=d, m10=1)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;（&lt;code&gt;.&lt;/code&gt; 表示 0 / 空）&lt;/p&gt;
&lt;h3 id=&#34;2-寻找并圈出尽可能大的-2k-相邻块允许使用-d-作为-1&#34;&gt;2) 寻找并圈出尽可能大的 2^k 相邻块（允许使用 d 作为 1）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目标&lt;/strong&gt;：用尽量少且尽量大的圈覆盖所有 X（真实的 1），可以把 d 看作 1 以便扩大圈。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;圈法建议与选择&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以把左上 2×2（由 m0, m1(d), m8, m9(d) 组成）圈成一个 4 格（cover m0 &amp;amp; m8 plus d&amp;rsquo;s）。这个圈对应 &lt;code&gt;B&#39; C&#39;&lt;/code&gt;（见下文推导）。&lt;/li&gt;
&lt;li&gt;类似地，把右下两列（col &lt;code&gt;11&lt;/code&gt; 与 &lt;code&gt;10&lt;/code&gt;）在上/下合并利用 d，或把 m2、m10 与相邻的 d（m3、m11）围成 4 格，得到 &lt;code&gt;B&#39; C&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;对 m5、m7（位于 AB=01 行，列 01 和 11）可以圈成一个 1×2 的横向圈（这将保留 A&amp;rsquo;·B·D，因为 D=1 恒定，A&amp;rsquo;=1 恒定，B=1 恒定），也可以检查是否有更大的圈通过别的 d 扩大（此示例中 m5 与 m7 最简是由 A&amp;rsquo;·B·D 覆盖）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面给出一个&lt;strong&gt;合理的最简覆盖&lt;/strong&gt;（示范）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;圈 A（4 格）&lt;/strong&gt;：覆盖 m0, m1(d), m8, m9(d) → 形成一个 2×2 块（左上与左下两行、左两列）。
&lt;ul&gt;
&lt;li&gt;在该圈中：
&lt;ul&gt;
&lt;li&gt;对列（CD）来看，列为 &lt;code&gt;00&lt;/code&gt; 与 &lt;code&gt;01&lt;/code&gt;，它们的 C 位均为 &lt;code&gt;0&lt;/code&gt;（C = 0 恒定），D 变化 → D 被消去；&lt;/li&gt;
&lt;li&gt;对行（AB）来看，行为 &lt;code&gt;00&lt;/code&gt; 与 &lt;code&gt;10&lt;/code&gt;，对应 B = 0 恒定（A 变化） → A 被消去，B = 0 成为常量（记作 B&amp;rsquo;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因此乘积项为 &lt;code&gt;B&#39; C&#39;&lt;/code&gt;（B=0 → B&amp;rsquo;，C=0 → C&amp;rsquo;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;圈 B（4 格）&lt;/strong&gt;：覆盖 m2, m3(d), m10, m11(d) → 形成右侧两列同样的 2×2 块。
&lt;ul&gt;
&lt;li&gt;在该圈中：列为 &lt;code&gt;11&lt;/code&gt; 与 &lt;code&gt;10&lt;/code&gt;（两列均有 C = 1 恒定），行为 &lt;code&gt;00&lt;/code&gt; 与 &lt;code&gt;10&lt;/code&gt;（B = 0 恒定），得到 &lt;code&gt;B&#39; C&lt;/code&gt;。
-（注意：如果不使用 d，则可能需要两个 1×1 或 1×2 的小圈；使用 d 能把它们合并为更大圈，从而消去更多变量。）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;圈 C（2 格）&lt;/strong&gt;：覆盖 m5 与 m7（AB = 01 行，CD = 01 与 11 两列）
&lt;ul&gt;
&lt;li&gt;在该圈中：行固定为 &lt;code&gt;01&lt;/code&gt; → A = 0（A&amp;rsquo;），B = 1；列两格 CD=01 与 CD=11 对应 D = 1 恒定、C 变化 → C 被消去，D 保留。&lt;/li&gt;
&lt;li&gt;乘积项为 &lt;code&gt;A&#39; B D&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-写出化简表达式把每个圈对应的乘积项求或&#34;&gt;3) 写出化简表达式（把每个圈对应的乘积项求或）
&lt;/h3&gt;&lt;p&gt;将上面三圈对应的乘积项相加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;F = B&amp;#39; C&amp;#39;  +  B&amp;#39; C  +  A&amp;#39; B D
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意：&lt;code&gt;B&#39; C&#39; + B&#39; C = B&#39; (C&#39; + C) = B&#39;&lt;/code&gt;，因此可以进一步化简：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;F = B&amp;#39;  +  A&amp;#39; B D
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;4-验证直观检查覆盖了所有原始-1&#34;&gt;4) 验证（直观检查覆盖了所有原始 1）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;B&#39;&lt;/code&gt; 覆盖了所有 B = 0 的情况（AB 行 00 与 10），即包含 m0, m2, m8, m10（以及包含在 d 的格子），这些都是原始的 1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&#39; B D&lt;/code&gt; 覆盖 AB=01 且 D=1 的格子，即 m5、m7。&lt;/li&gt;
&lt;li&gt;因此所有原始的 1（m0,m2,m5,m7,m8,m10）都被覆盖，且没有需要单独覆盖的遗留 1。表达式正确且更简。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;如何把圈直接转成代数项快速记法&#34;&gt;如何把“圈”直接转成代数项（快速记法）
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;找圈 → 找该圈中不变（恒 0 或恒 1）的变量 → 转成乘积：
&lt;ul&gt;
&lt;li&gt;恒为 1 → 写出该变量（不补）。&lt;/li&gt;
&lt;li&gt;恒为 0 → 写出该变量的反（&lt;code&gt;&#39;&lt;/code&gt; 或 &lt;code&gt;¯&lt;/code&gt; 表示）。&lt;/li&gt;
&lt;li&gt;在圈内变化（既有 0 又有 1）→ 该变量不出现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例如：圈里若 &lt;code&gt;A&lt;/code&gt; 固定为 0，&lt;code&gt;B&lt;/code&gt; 固定为 1，&lt;code&gt;C,D&lt;/code&gt; 变化 → 项为 &lt;code&gt;A&#39; B&lt;/code&gt;（C、D 被消去）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;关于本质素蕴涵项essential-prime-implicant的补充用于判定谁必须被选&#34;&gt;关于“本质素蕴涵项（Essential Prime Implicant）”的补充（用于判定谁必须被选）
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;素蕴涵项（Prime Implicant）&lt;/strong&gt;：不能再扩大（再包含更多 1）且覆盖若干原始 1 的圈（表示一个不可再合并的乘积项）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;本质素蕴涵项（Essential PI）&lt;/strong&gt;：覆盖至少一个仅由该 PI 覆盖到的 &lt;code&gt;1&lt;/code&gt;（即该 &lt;code&gt;1&lt;/code&gt; 只被这个 PI 覆盖），因此该 PI 在最小覆盖中是必需的。&lt;/li&gt;
&lt;li&gt;化简流程中常先找出所有本质素蕴涵项并选上它们，然后用剩下的素蕴涵项来覆盖未覆盖的 &lt;code&gt;1&lt;/code&gt;，以得到最小覆盖（若存在选择冗余则需比较并选择最优组合）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;练习建议如何练好卡诺图化简&#34;&gt;练习建议（如何练好卡诺图化简）
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初级&lt;/strong&gt;：做很多 3 变量 / 4 变量的 K 图练习，重点练习格雷码位置与相邻判断。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中级&lt;/strong&gt;：做含 &lt;code&gt;don&#39;t-care&lt;/code&gt; 的题目，练习何时把 d 当作 1 使用（当能扩大圈并减少项时就用）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高级&lt;/strong&gt;：学习识别本质素蕴涵项与冗余覆盖问题（多解情况），尝试多种圈法并比较项数与每项变量数，培养选择“成本最低”的感觉。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工具辅助&lt;/strong&gt;：当变量增多（≥5）时，卡诺图不便，学习使用 Quine–McCluskey 或 布尔代数化简软件 / 仿真工具（但理解卡诺图有助于直觉）&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Computer Organization Note Part II</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-part-ii/</link>
        <pubDate>Fri, 10 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-part-ii/</guid>
        <description>&lt;h1 id=&#34;计算机组成原理数据的表示运算和校验&#34;&gt;《计算机组成原理》：数据的表示、运算和校验
&lt;/h1&gt;&lt;h2 id=&#34;1-进位计数制number-systems&#34;&gt;1. 进位计数制（Number Systems）
&lt;/h2&gt;&lt;h3 id=&#34;概念&#34;&gt;概念
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基数（radix）&lt;/strong&gt;：每位允许的记数符号个数。例如十进制基数 10（0–9）、二进制基数 2（0–1）、八进制 8、十六进制 16（0–F）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;权值（weight）&lt;/strong&gt;：数位 i 的权值为 &lt;code&gt;base^i&lt;/code&gt;。例如十进制中 256.7 = 2×10² + 5×10¹ + 6×10⁰ + 7×10⁻¹。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;各进制常见示例&#34;&gt;各进制常见示例
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;二进制：&lt;code&gt;(101.1)_2 = 1×2² + 0×2¹ + 1×2⁰ + 1×2⁻¹ = 5.5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;八进制：&lt;code&gt;(12.4)_8 = 1×8¹ + 2×8⁰ + 4×8⁻¹ = 10.5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;十六进制：&lt;code&gt;(3A6)_16 = 3×16² + 10×16¹ + 6 = 934&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二进制的运算规则关键&#34;&gt;二进制的运算规则（关键）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;加法（单位）：0+0=0；0+1=1；1+1=10（产生进位）&lt;/li&gt;
&lt;li&gt;减法、乘法、除法同理（见 PPT 示例）&lt;/li&gt;
&lt;li&gt;二进制与十进制互换：
&lt;ul&gt;
&lt;li&gt;十进制整数→二进制：反复除 2 取余（低位到高位）。&lt;/li&gt;
&lt;li&gt;十进制小数→二进制小数：反复乘 2 取整数部分（直到小数为 0 或达到精度）。&lt;/li&gt;
&lt;li&gt;二进制→十进制：按权展开求和。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;八十六进制与二进制转换技巧&#34;&gt;八/十六进制与二进制转换技巧
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;八进制：每 3 位二进制为一组（从小数点向两侧分组），例如 &lt;code&gt;(1011101.0110101)_2 = (135.324)_8&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;十六进制：每 4 位二进制为一组，例如上例也可得到 &lt;code&gt;(5D.6A)_16&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-带符号数的表示符号与机器数&#34;&gt;2. 带符号数的表示（符号与机器数）
&lt;/h2&gt;&lt;p&gt;在计算机中需要把“正/负”变成机器可计算的二进制码，常见三种表示方法（都以最高位为符号位，0 表示正，1 表示负）：&lt;/p&gt;
&lt;h3 id=&#34;21-原码sign-magnitude&#34;&gt;2.1 原码（Sign-magnitude）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;编码规则：最高位为符号位，其余位为数值位的原值不变。&lt;/li&gt;
&lt;li&gt;缺陷：存在 &lt;strong&gt;+0&lt;/strong&gt; 和 &lt;strong&gt;-0&lt;/strong&gt; 两种表示，减法运算复杂（需比较大小再决定符号）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例（8 位）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+127 原码 = &lt;code&gt;0 1111111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;−127 原码 = &lt;code&gt;1 1111111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;+0 = &lt;code&gt;0 0000000&lt;/code&gt;，−0 = &lt;code&gt;1 0000000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-反码ones-complement&#34;&gt;2.2 反码（Ones&amp;rsquo; complement）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;正数：反码 = 原码（不变）&lt;/li&gt;
&lt;li&gt;负数：反码 = 对原码的符号位不变，数值位按位取反（1↔0）&lt;/li&gt;
&lt;li&gt;缺点：仍存在 &lt;strong&gt;+0&lt;/strong&gt; 和 &lt;strong&gt;-0&lt;/strong&gt;（&lt;code&gt;0 0000000&lt;/code&gt; 与 &lt;code&gt;1 1111111&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例（8 位）：真值 −105&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原码 &lt;code&gt;1 1101001&lt;/code&gt; → 反码 &lt;code&gt;1 0010110&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-补码twos-complement--现代计算机标准&#34;&gt;2.3 补码（Two&amp;rsquo;s complement） —— 现代计算机标准
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;正数：补码 = 原码（不变）&lt;/li&gt;
&lt;li&gt;负数：补码 = 反码 + 1（对原码按位取反后最低位加 1）&lt;/li&gt;
&lt;li&gt;优点：0 只有一种表示（&lt;code&gt;0...0&lt;/code&gt;），加减法能统一为加法（符号位参与运算），硬件实现更简单；还能表示一个额外的最小负数（例如 8 位：−128 可表示）。&lt;/li&gt;
&lt;li&gt;例（8 位）：补码表示范围 &lt;code&gt;-128 .. +127&lt;/code&gt;。
+127 补码 = &lt;code&gt;0 1111111&lt;/code&gt;，−128 补码 = &lt;code&gt;1 0000000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常见操作补码与原码转换&#34;&gt;常见操作（补码与原码转换）
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;已知原码求补码（负数）：按位取反后末位 +1。&lt;/li&gt;
&lt;li&gt;已知补码求原码：对补码连同符号位一起“变反、末位加 1”（即对负数做再次求补得到原码）。&lt;/li&gt;
&lt;li&gt;求 &lt;code&gt;[-X]&lt;/code&gt; 的补码：把 &lt;code&gt;X&lt;/code&gt; 的补码连同符号位一起取反然后末位 +1（即补码取负的直接变换）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-定点数与浮点数fixed-point--floating-point&#34;&gt;3. 定点数与浮点数（Fixed-point &amp;amp; Floating-point）
&lt;/h2&gt;&lt;h3 id=&#34;31-定点数&#34;&gt;3.1 定点数
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：程序中约定小数点固定在某一位置（比如全部数的小数点在同一位置）。&lt;/li&gt;
&lt;li&gt;有三类：
&lt;ol&gt;
&lt;li&gt;带符号定点小数：小数点固定在符号位之后；字长 &lt;code&gt;n+1&lt;/code&gt; 时，补码表示范围为 &lt;code&gt;-1 .. 1 - 2^-n&lt;/code&gt;，分辨率 &lt;code&gt;2^-n&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;带符号定点整数：小数点固定在最低数值位之后；补码范围 &lt;code&gt;-2^n .. 2^n -1&lt;/code&gt;，分辨率 1。&lt;/li&gt;
&lt;li&gt;无符号定点整数：范围 &lt;code&gt;0 .. 2^(n+1)-1&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;注意：定点数的小数点位置是&lt;strong&gt;约定&lt;/strong&gt;，并不需要硬件单独表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-浮点数浮点表示法&#34;&gt;3.2 浮点数（浮点表示法）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本形式&lt;/strong&gt;：&lt;code&gt;N = M × R^E&lt;/code&gt;（R 通常为 2），其中：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;M&lt;/code&gt;（尾数，mantissa/significand）：带符号的定点小数（规定规格化后范围，使表示唯一）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E&lt;/code&gt;（阶码，exponent）：带符号定点整数，常采用 &lt;strong&gt;移码（bias）&lt;/strong&gt; 表示（如 IEEE754）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt;（符号位）：表示正负。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移码（Bias）&lt;/strong&gt;：对定点整数 &lt;code&gt;x&lt;/code&gt; 的移码表示为 &lt;code&gt;x + 2^(n-1)&lt;/code&gt;（使得阶码表现为无符号偏移，便于比较大小与排序）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;规格化（Normalization）&lt;/strong&gt;：为保证表示唯一，尾数 M 要规格化（例如二进制浮点规定 &lt;code&gt;1/2 ≤ |M| &amp;lt; 1&lt;/code&gt; 或 &lt;code&gt;1 ≤ |M| &amp;lt; 2&lt;/code&gt;，具体依格式而定）。规格化使最高有效位固定（通常为 1），提高精度利用率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ieee-754-简明&#34;&gt;IEEE 754 简明
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;32 位单精度&lt;/strong&gt;（single precision）格式：
&lt;ul&gt;
&lt;li&gt;S（1 位）| E（8 位，移码偏移 127）| M（23 位，尾数的纯小数部分，真值为 &lt;code&gt;1.M&lt;/code&gt; 对于正规化数）&lt;/li&gt;
&lt;li&gt;真值：&lt;code&gt;F = (-1)^S × 1.M × 2^(E - 127)&lt;/code&gt;（当 E 非全 0/全 1 并为正规化数）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特殊情况：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;E = 0&lt;/code&gt; 且 &lt;code&gt;M = 0&lt;/code&gt; → 表示 ±0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E = 0&lt;/code&gt; 且 &lt;code&gt;M ≠ 0&lt;/code&gt; → 次正规数（subnormal）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E = 255&lt;/code&gt; 且 &lt;code&gt;M = 0&lt;/code&gt; → ±∞&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E = 255&lt;/code&gt; 且 &lt;code&gt;M ≠ 0&lt;/code&gt; → NaN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;精度&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;单精度尾数 23 位 → 相对精度约 &lt;code&gt;2^-23&lt;/code&gt;（加上隐含的 1，则有效精度 24 位）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例（PPT）&lt;/strong&gt;：把 &lt;code&gt;20.59375&lt;/code&gt; 转为 IEEE754 单精度：
&lt;ol&gt;
&lt;li&gt;十进制 → 二进制：&lt;code&gt;20.59375 = 10100.10011&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;规格化：&lt;code&gt;1.010010011 × 2^4&lt;/code&gt;（e = 4）&lt;/li&gt;
&lt;li&gt;阶码加偏移：&lt;code&gt;E = 4 + 127 = 131 = 10000011_b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;尾数 M = &lt;code&gt;010010011000...&lt;/code&gt;（补齐 23 位）&lt;/li&gt;
&lt;li&gt;最终二进制码：&lt;code&gt;0 10000011 01001001100000000000000&lt;/code&gt; → 十六进制 &lt;code&gt;41A4C000&lt;/code&gt;。（详见 PPT 步骤）1.1 数据的表示、运算和校验&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-字符编码ascii&#34;&gt;4. 字符编码（ASCII）
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ASCII&lt;/strong&gt;：美国标准信息交换码，使用 7 位二进制，能表示 128 个字符（包括 33 个控制字符和 95 个可打印字符）。&lt;/li&gt;
&lt;li&gt;常用区间：
&lt;ul&gt;
&lt;li&gt;数字 &lt;code&gt;0-9&lt;/code&gt; 的十六进制代码为 &lt;code&gt;30h - 39h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;大写字母 &lt;code&gt;A-Z&lt;/code&gt;：&lt;code&gt;41h - 5Ah&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;小写字母 &lt;code&gt;a-z&lt;/code&gt;：&lt;code&gt;61h - 7Ah&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中国还有国家标准编码（如 GB），但 ASCII 在基础英文文本与控制字符上通用。1.1 数据的表示、运算和校验&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-定点加减运算使用补码&#34;&gt;5. 定点加减运算（使用补码）
&lt;/h2&gt;&lt;h3 id=&#34;51-原理&#34;&gt;5.1 原理
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用补码表示的数（包括符号位）直接相加即可：
&lt;code&gt;(X + Y)_补 = X_补 + Y_补&lt;/code&gt;
&lt;code&gt;(X - Y)_补 = X_补 + (-Y)_补&lt;/code&gt;（把 Y 取补后相加）&lt;/li&gt;
&lt;li&gt;全过程以 &lt;code&gt;2^n&lt;/code&gt; 为模（即超出位宽的高位丢弃，等价于模运算）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;52-示例逐步&#34;&gt;5.2 示例（逐步）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;例 1：&lt;code&gt;X=3, Y=2&lt;/code&gt;（假设 5-bit 显示为例）
&lt;ul&gt;
&lt;li&gt;X_补 = &lt;code&gt;0 0011&lt;/code&gt;，Y_补 = &lt;code&gt;0 0010&lt;/code&gt; → 相加 = &lt;code&gt;0 0101&lt;/code&gt;（+5，无溢出）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例 2：&lt;code&gt;X=-3, Y=-2&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;X_补 = &lt;code&gt;1 1101&lt;/code&gt;（-3），Y_补 = &lt;code&gt;1 1110&lt;/code&gt;（-2） → 相加得到 &lt;code&gt;1 1011&lt;/code&gt;（-5 的补码）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53-注意变补-与-补码-的区别考点&#34;&gt;5.3 注意：&lt;code&gt;变补&lt;/code&gt; 与 补码 的区别（考点）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;变补&lt;/strong&gt;：把某数连同符号位一起取反，末位加 1 —— 通常用于“对补码求负”或“由补码求相反数”的操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;补码表示&lt;/strong&gt;：用于直接表示数值（正数的补码同原码，负数按反码+1）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;6-溢出判断overflow-detection&#34;&gt;6. 溢出判断（Overflow Detection）
&lt;/h2&gt;&lt;p&gt;当用补码做加减时，结果可能超出机器所能表示的范围——称为溢出。PPT 给出三种硬件判断逻辑（实际任意一种都可实现）：&lt;/p&gt;
&lt;h3 id=&#34;常用规则直观&#34;&gt;常用规则（直观）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加法溢出&lt;/strong&gt;：当两个同符号数相加，结果与操作数符号不同，则发生溢出。
&lt;ul&gt;
&lt;li&gt;例如：两个正数相加却得到负数（正溢）；两个负数相加却得到正数（负溢）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;硬件实现方法&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基于操作数和结果符号位&lt;/strong&gt;：&lt;code&gt;overflow = (SA &amp;amp; SB &amp;amp; ~SF) | (~SA &amp;amp; ~SB &amp;amp; SF)&lt;/code&gt;（简化含义：若 SA == SB 且 SF != SA → 溢出）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于最高位进位与符号位进位比较&lt;/strong&gt;：&lt;code&gt;overflow = Cf ⊕ C&lt;/code&gt;，其中 &lt;code&gt;C&lt;/code&gt; 是尾数最高位的进位，&lt;code&gt;Cf&lt;/code&gt; 是符号位的进位（PPT 术语）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;双符号位比较（Sf1 ⊕ Sf2）&lt;/strong&gt;：使用不同阶段的符号位判断溢出（在硬件设计中有实现方式）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例ppt-的示例&#34;&gt;示例（PPT 的示例）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;10 + 7&lt;/code&gt; 在某较小位宽会发生正溢（示例中展示了进位与符号关系）。&lt;/li&gt;
&lt;li&gt;综上，&lt;strong&gt;最简单记忆法&lt;/strong&gt;：加法时若两个操作数符号相同而结果符号不同，则溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;7-移位运算shifts&#34;&gt;7. 移位运算（Shifts）
&lt;/h2&gt;&lt;p&gt;移位是位级操作，可以是逻辑移位、算术移位或循环移位。&lt;/p&gt;
&lt;h3 id=&#34;71-逻辑移位logical-shift&#34;&gt;7.1 逻辑移位（Logical shift）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;左移：在右端补 0，左移相当于乘以 2^n（若无溢出）。&lt;/li&gt;
&lt;li&gt;右移：在左端补 0（用于无符号数），相当于无符号除以 2^n（舍去低位）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;72-算术移位arithmetic-shift&#34;&gt;7.2 算术移位（Arithmetic shift）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;保持符号位不变（最高位保持原符号值），用于带符号整数（补码）右移，相当于算术除以 2（向零或向 -∞ 取整取决实现）。&lt;/li&gt;
&lt;li&gt;左移与逻辑左移相同（在多数实现中空位补 0，可能产生溢出）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;73-循环移位rotate&#34;&gt;7.3 循环移位（Rotate）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;左/右移出位从另一端回填（常用于加密与循环缓冲）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ppt-中的要点双符号位&#34;&gt;PPT 中的要点（双符号位）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在一些原码乘法算法里，寄存器使用双符号位（第一个符号位保持原符号，第二符号位用于移位进入尾数最高位），移位规则中空位如何补 0/1 要特别注意，尤其是负数右移需补 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;8-舍入与截断rounding&#34;&gt;8. 舍入与截断（Rounding）
&lt;/h2&gt;&lt;p&gt;常用舍入策略（PPT 提到两种）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;“0 舍 1 入”&lt;/strong&gt;（即遇到被丢弃位为 0，则舍弃；为 1，则向上加 1）：类似“向最近偶数/四舍五入”的简化版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;末位恒置 1&lt;/strong&gt;：不管被截断位如何，保留位的最低位置 1（一种保守策略，保证不上溢出但不是常用）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：浮点运算中通常使用更复杂且规范的舍入（例如 IEEE754 的 round-to-nearest-even 等）；在定点截断时应明确采用的舍入策略以保证一致性。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;9-定点乘法fixed-point-multiplication&#34;&gt;9. 定点乘法（Fixed-point Multiplication）
&lt;/h2&gt;&lt;p&gt;PPT 讲解了原码一位乘法、补码一位乘法（比较法/校正法）等。&lt;/p&gt;
&lt;h3 id=&#34;91-原码一位乘法逐位累加移位&#34;&gt;9.1 原码一位乘法（逐位累加移位）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基本思想：把乘数每一位乘以被乘数（形成部分积），把这些部分积按位移位并累加得到乘积（类似小学校算）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄存器分配（常见实现）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt;：部分积累加和（含两位符号位）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;B&lt;/code&gt;：被乘数的绝对值（保持不变）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt;：乘数（最低位用于判断），同时存放乘积低位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;（对尾数位逐位执行）：
&lt;ul&gt;
&lt;li&gt;若 &lt;code&gt;C_n = 1&lt;/code&gt;：&lt;code&gt;A = A + B&lt;/code&gt;，然后右移（A 的最低位移入 C 的最高位）&lt;/li&gt;
&lt;li&gt;若 &lt;code&gt;C_n = 0&lt;/code&gt;：&lt;code&gt;A = A + 0&lt;/code&gt;，右移&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最后加符号位：结果符号 &lt;code&gt;S_P = S_X ⊕ S_Y&lt;/code&gt;（X 与 Y 为被乘数与乘数符号）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;（PPT）：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0.1101 × 0.1011&lt;/code&gt;（均为正，二进制小数），手工步骤列出了部分积与累加，最终乘积为 &lt;code&gt;0.10001111&lt;/code&gt;（十进制 ≈ 0.55859375）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;92-补码一位乘法比较法&#34;&gt;9.2 补码一位乘法（比较法）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;校正法&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;若乘数 &lt;code&gt;Y&lt;/code&gt; 为正，则可按原码乘法（不需校正）。&lt;/li&gt;
&lt;li&gt;若乘数为负，需对结果做校正（加或减被乘数补码）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比较法（更常用）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;用乘数的相邻两位（&lt;code&gt;Y_n&lt;/code&gt; 与 &lt;code&gt;Y_{n+1}&lt;/code&gt;）比较决定操作：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;00&lt;/code&gt; 或 &lt;code&gt;11&lt;/code&gt; → &lt;code&gt;A = A / 2&lt;/code&gt;（不加）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;01&lt;/code&gt; → &lt;code&gt;A = (A + X) / 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10&lt;/code&gt; → &lt;code&gt;A = (A - X) / 2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;该方法减少了每一步的加减次数（属于 Booth 算法的简化思想的一类）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄存器与判定位&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;C 寄存器末位拼接一个附加位 &lt;code&gt;Y_{n+1}&lt;/code&gt;（初始为 0），每步检查 &lt;code&gt;Y_n, Y_{n+1}&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例（PPT）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X = -0.1101, Y = -0.1011&lt;/code&gt;（补码表示），通过比较法逐步进行了 &lt;code&gt;A&lt;/code&gt; 的更新，最终得到 &lt;code&gt;(XY)_补&lt;/code&gt;（中间有修正步骤），示例中列出每一步的 &lt;code&gt;A&lt;/code&gt; 与 &lt;code&gt;C&lt;/code&gt; 内容，便于对照实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;93-实际实现要点&#34;&gt;9.3 实际实现要点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对补码乘法，寄存器中 &lt;code&gt;B&lt;/code&gt;（被乘数）通常保留补码形式（或其负值也预先计算）以便需要时加减。&lt;/li&gt;
&lt;li&gt;结果位数通常为两倍尾数位（需预先分配足够寄存器位）。&lt;/li&gt;
&lt;li&gt;注意符号位处理（单符号位或双符号位实现的差别），右移时如何填充符号位是关键易错处（参见 PPT 的“易出错处”）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;10-本章小结要点回顾&#34;&gt;10. 本章小结（要点回顾）
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;掌握进制间转换&lt;/strong&gt;（尤其二/八/十/十六之间的转换技巧与分组规则）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;带符号数的三种表示&lt;/strong&gt;：原码、反码、补码 —— 理解补码优势并熟练做补码运算与变换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定点与浮点表示&lt;/strong&gt;：理解定点表示的约定、小数点位置含义；重点掌握 IEEE754 单精度格式（S/E/M 的位含义、偏移量、特殊值）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定点加减乘运算实现&lt;/strong&gt;：补码加法统一处理、溢出判断（符号位规则与进位比对）、移位规则、截断与舍入方法、定点乘法的寄存器算法（原码乘法、补码比较法）。1.1 数据的表示、运算和校验&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;11-例题练习含答案与步骤&#34;&gt;11. 例题练习（含答案与步骤）
&lt;/h2&gt;&lt;h3 id=&#34;练习-1--进制转换&#34;&gt;练习 1 — 进制转换
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;将 &lt;code&gt;(369)_10&lt;/code&gt; 转换为八进制和十六进制。
&lt;ul&gt;
&lt;li&gt;解：&lt;code&gt;369 ÷ 8&lt;/code&gt; 得商 46 余 1 → 46 ÷ 8 商 5 余 6 → 5 ÷ 8 商 0 余 5 → 八进制 &lt;code&gt;561&lt;/code&gt;。
十六进制：&lt;code&gt;369 = 1×16² + 7×16 + 1&lt;/code&gt; → &lt;code&gt;(171)_16&lt;/code&gt;。
（与 PPT 示例一致）1.1 数据的表示、运算和校验&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;练习-2--补码运算与溢出&#34;&gt;练习 2 — 补码运算与溢出
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;假设用 8 位补码表示，计算 &lt;code&gt;100 + 50&lt;/code&gt;（十进制），判断是否溢出。
&lt;ul&gt;
&lt;li&gt;100 的 8 位补码 &lt;code&gt;01100100&lt;/code&gt;，50 的 8 位补码 &lt;code&gt;00110010&lt;/code&gt;，相加得 &lt;code&gt;10010110&lt;/code&gt;（最高位 1 表示负），但两操作数均为正而结果为负 → &lt;strong&gt;发生溢出&lt;/strong&gt;（结果模 256 后表示为 -106，但对有符号数这为溢出）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;练习-3--ieee754-转换&#34;&gt;练习 3 — IEEE754 转换
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;将 &lt;code&gt;-6.25&lt;/code&gt; 转为 IEEE754 单精度二进制表示。
&lt;ul&gt;
&lt;li&gt;6.25 = &lt;code&gt;110.01_b&lt;/code&gt; = &lt;code&gt;1.1001 × 2^2&lt;/code&gt; → exponent = &lt;code&gt;2 + 127 = 129 = 10000001_b&lt;/code&gt;，mantissa = &lt;code&gt;1001000...&lt;/code&gt;（后面补零）。符号 S = 1。&lt;/li&gt;
&lt;li&gt;最终：&lt;code&gt;1 10000001 10010000000000000000000&lt;/code&gt; → 十六进制可自行分组转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;练习-4--定点乘法逐步&#34;&gt;练习 4 — 定点乘法（逐步）
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;计算 &lt;code&gt;0.1101 × 0.1011&lt;/code&gt;（二进制小数，结果保留 8 位），手工按原码乘法步骤：
&lt;ul&gt;
&lt;li&gt;参见 PPT 的手工乘法展示，最终 &lt;code&gt;0.10001111&lt;/code&gt;（十进制 ≈ 0.55859375）。（已在章节中逐位解释）1.1 数据的表示、运算和校验&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;12-常见易错点与考试上机提示&#34;&gt;12. 常见易错点与考试/上机提示
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;符号位与补码概念混淆&lt;/strong&gt;：牢记“正数的补码 = 原码”，只有负数需要按位取反加 1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0 的多重表示&lt;/strong&gt;：原码/反码存在 +0 / −0；补码只有单一 0。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;溢出判断&lt;/strong&gt;：不要只看最高位进位，使用“两个操作数同符号且结果符号不同”更直观；硬件可以用 &lt;code&gt;Cf ⊕ C&lt;/code&gt; 或 &lt;code&gt;Sf1 ⊕ Sf2&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移位时填充规则&lt;/strong&gt;：算术右移需补符号位（符号扩展）；逻辑右移补 0。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浮点角标偏移（bias）&lt;/strong&gt;：记住单精度偏移是 127（即 E_stored = E_true + 127）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浮点特殊值&lt;/strong&gt;：E 全 0（次正规或 0），E 全 1（±∞ 或 NaN 与 M 非零）。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Computer Organization Note Special II</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-special-ii/</link>
        <pubDate>Fri, 10 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-special-ii/</guid>
        <description>&lt;h1 id=&#34;ieee-754-单精度32-位-表示法详细说明&#34;&gt;IEEE-754 单精度（32 位）—— 表示法详细说明
&lt;/h1&gt;&lt;h2 id=&#34;格式字段与位宽&#34;&gt;格式（字段与位宽）
&lt;/h2&gt;&lt;p&gt;单精度 32 位由三部分组成（从高位到低位）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt;（符号位）—— 1 位：&lt;code&gt;0&lt;/code&gt; 表示正数，&lt;code&gt;1&lt;/code&gt; 表示负数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E&lt;/code&gt;（阶码 exponent）—— 8 位：采用**移码（biased）**表示，偏置（bias）为 &lt;code&gt;127&lt;/code&gt;（即实际阶码 = 存储值 − 127）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M&lt;/code&gt;（尾数 fraction / significand）—— 23 位：存储的是&lt;strong&gt;隐含 1&lt;/strong&gt; 之后的小数部分（对正规化数，真实尾数为 &lt;code&gt;1.M&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;真值公式（正规化数）：
&lt;code&gt;value = (-1)^S × 1.M × 2^(E_stored − 127)&lt;/code&gt;。
（当 &lt;code&gt;E_stored&lt;/code&gt; 既不是全 0 也不是全 1 时）&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;特殊情况e-与-m-的组合&#34;&gt;特殊情况（E 与 M 的组合）
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;E = 0&lt;/code&gt; 且 &lt;code&gt;M = 0&lt;/code&gt; → &lt;code&gt;±0&lt;/code&gt;（根据 S）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E = 0&lt;/code&gt; 且 &lt;code&gt;M ≠ 0&lt;/code&gt; → &lt;strong&gt;次正规数（subnormal）&lt;/strong&gt;：真值 &lt;code&gt;(-1)^S × 0.M × 2^(1−127)&lt;/code&gt;（没有隐含 1）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E = 255&lt;/code&gt;（即全 1）且 &lt;code&gt;M = 0&lt;/code&gt; → &lt;code&gt;±∞&lt;/code&gt;（正负无穷）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E = 255&lt;/code&gt; 且 &lt;code&gt;M ≠ 0&lt;/code&gt; → &lt;code&gt;NaN&lt;/code&gt;（非数）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一些重要概念&#34;&gt;一些重要概念
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;规格化（normalization）&lt;/strong&gt;：为了保证表示的唯一性，正规化时尾数 &lt;code&gt;M&lt;/code&gt; 满足 &lt;code&gt;1 ≤ 1.M &amp;lt; 2&lt;/code&gt;（即隐含 1 的最高位是 1）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移码（biased exponent）&lt;/strong&gt;：将带符号的阶（可以为负）映射为无符号位字段：&lt;code&gt;E_stored = E_true + bias&lt;/code&gt;。单精度 bias = 127。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;精度（有效位）&lt;/strong&gt;：尾数字段 23 位 + 隐含 1 = 24 位有效二进制位（相对精度约 &lt;code&gt;2^-24&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;示例把-2059375-转为-ieee-754-单精度逐位演算&#34;&gt;示例：把 &lt;code&gt;20.59375&lt;/code&gt; 转为 IEEE-754 单精度（逐位演算）
&lt;/h1&gt;&lt;p&gt;我们把转换的每一步都写清楚，便于跟着做与核对（与 PPT 中示例一致）。1.1 数据的表示、运算和校验&lt;/p&gt;
&lt;h3 id=&#34;1-把十进制数拆成整数与小数并分别转二进制&#34;&gt;1) 把十进制数拆成整数与小数并分别转二进制
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;整数部分 &lt;code&gt;20&lt;/code&gt; → 二进制：
&lt;ul&gt;
&lt;li&gt;20 ÷ 2 = 10 … 0&lt;/li&gt;
&lt;li&gt;10 ÷ 2 = 5 … 0&lt;/li&gt;
&lt;li&gt;5 ÷ 2 = 2 … 1&lt;/li&gt;
&lt;li&gt;2 ÷ 2 = 1 … 0&lt;/li&gt;
&lt;li&gt;1 ÷ 2 = 0 … 1
逆序取余数： &lt;code&gt;20 = (10100)_2&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;小数部分 &lt;code&gt;0.59375&lt;/code&gt; → 二进制（乘 2 取整数部分）：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0.59375 × 2 = 1.1875&lt;/code&gt; → 整数位 &lt;code&gt;1&lt;/code&gt;，余 &lt;code&gt;.1875&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.1875 × 2 = 0.375&lt;/code&gt; → 整数位 &lt;code&gt;0&lt;/code&gt;，余 &lt;code&gt;.375&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.375 × 2 = 0.75&lt;/code&gt; → 整数位 &lt;code&gt;0&lt;/code&gt;，余 &lt;code&gt;.75&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.75 × 2 = 1.5&lt;/code&gt; → 整数位 &lt;code&gt;1&lt;/code&gt;，余 &lt;code&gt;.5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.5 × 2 = 1.0&lt;/code&gt; → 整数位 &lt;code&gt;1&lt;/code&gt;，余 &lt;code&gt;0&lt;/code&gt;（终止）
于是 &lt;code&gt;0.59375 = .10011₂&lt;/code&gt;（注意每一步都写出整数位与余数，以防算错）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;合并：&lt;code&gt;20.59375 = 10100.10011₂&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-规格化把小数点移至最高有效位后面&#34;&gt;2) 规格化（把小数点移至最高有效位后面）
&lt;/h3&gt;&lt;p&gt;把 &lt;code&gt;10100.10011₂&lt;/code&gt; 写成 &lt;code&gt;1.xxxxx × 2^e&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;10100.10011₂ = 1.010010011₂ × 2^4&lt;/code&gt; （因为把小数点左移了 4 位：从 &lt;code&gt;10100.&lt;/code&gt; → &lt;code&gt;1.&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;真阶 &lt;code&gt;E_true = 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E_stored = E_true + bias = 4 + 127 = 131&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-求各字段的二进制位&#34;&gt;3) 求各字段的二进制位
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;符号位 &lt;code&gt;S = 0&lt;/code&gt;（数为正）。&lt;/li&gt;
&lt;li&gt;阶码 &lt;code&gt;E_stored = 131&lt;/code&gt; → 二进制 8 位：
&lt;ul&gt;
&lt;li&gt;131 in binary = &lt;code&gt;10000011&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尾数 &lt;code&gt;M&lt;/code&gt;（存储 23 位的“纯小数”部分）：
&lt;ul&gt;
&lt;li&gt;规格化尾数是 &lt;code&gt;1.010010011...&lt;/code&gt;，我们存 &lt;code&gt;010010011&lt;/code&gt; 然后补 0 到 23 位：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M = 01001001100000000000000&lt;/code&gt; （共 23 位；原有效位 &lt;code&gt;010010011&lt;/code&gt; 占 9 位，后面补 14 个 0）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-合并成-32-位二进制与十六进制&#34;&gt;4) 合并成 32 位二进制与十六进制
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;32 位二进制（分段）：
&lt;code&gt;S | E (8) | M (23)&lt;/code&gt; =
&lt;code&gt;0 10000011 01001001100000000000000&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分成 4 位一组（便于转十六进制）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0100 0001 1010 0100 1100 0000 0000 0000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  4    1    A    4    C    0    0    0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十六进制表示： &lt;code&gt;41A4C000&lt;/code&gt;（与 PPT 示例一致）。1.1 数据的表示、运算和校验&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-最终结论&#34;&gt;5) 最终结论
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;IEEE-754 单精度二进制（32 位）：
&lt;code&gt;0 10000011 01001001100000000000000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;十六进制： &lt;code&gt;0x41A4C000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;小提示：把 IEEE-754 字段写成二进制后，分 4 位一组转成 hex 最省错；另外在做小数乘 2 的链式步骤时，记录每一步余数可以防止遗漏或记错位。&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;定点乘法逐位乘法-两种主要方法详述--完整示例&#34;&gt;定点乘法（逐位乘法）—— 两种主要方法（详述 + 完整示例）
&lt;/h1&gt;&lt;p&gt;定点乘法常见用于小型处理器或教学实现。两大类实现细节、寄存器安排与步骤不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A. 原码一位乘法&lt;/strong&gt;（Sign-magnitude method，逐位累加并右移） —— 适用于“按符号和绝对值分别处理”的实现，思路直观（学校算法）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;B. 补码一位乘法&lt;/strong&gt;（Two‘s-complement methods） —— 操作数以补码表示，包含两种常见子方法：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;校正法（correction method）&lt;/strong&gt; —— 分正/负两种乘数情况并对结果做修正；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比较法（Booth-like / neighbor-bit method）&lt;/strong&gt; —— 利用乘数相邻位对局部操作做 &lt;code&gt;+X&lt;/code&gt;/&lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;0&lt;/code&gt; 决策，效率更高（适合硬件）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面逐一说明并给出完整示例（逐寄存器步骤）。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-原码一位乘法逐位累加--右移&#34;&gt;A. 原码一位乘法（逐位累加 + 右移）
&lt;/h2&gt;&lt;h3 id=&#34;思路要点&#34;&gt;思路（要点）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;把被乘数 &lt;code&gt;X&lt;/code&gt;、乘数 &lt;code&gt;Y&lt;/code&gt; 看成&lt;strong&gt;原码&lt;/strong&gt;（sign + magnitude）。算法只处理绝对值部分，符号单独计算（&lt;code&gt;S_P = S_X XOR S_Y&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;寄存器分配（一个常见约定，和 PPT 一致）：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt;：部分积寄存器（带 &lt;strong&gt;双符号位&lt;/strong&gt;，表示格式 &lt;code&gt;S1 S2 . fractional_bits&lt;/code&gt;），初值 &lt;code&gt;00.0000...&lt;/code&gt;（双符号位是为了在右移时保留符号扩展位）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;B&lt;/code&gt;：被乘数的绝对值（也用双符号位表示，值保持不变）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt;：乘数的绝对值（&lt;strong&gt;没有符号位&lt;/strong&gt;放在最左/最上），并在最低位附加一个 0（称为附加位 &lt;code&gt;Y_{n+1}&lt;/code&gt;），用于判断。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每一步取 &lt;code&gt;C&lt;/code&gt; 的最低位（判断位 &lt;code&gt;C_n&lt;/code&gt;）：
&lt;ul&gt;
&lt;li&gt;若 &lt;code&gt;C_n = 1&lt;/code&gt;：&lt;code&gt;A = A + B&lt;/code&gt;（按原码加法），然后把 &lt;code&gt;A&lt;/code&gt; 右移 1 位（特殊的右移规则：A 的末位移入 C 的最高位；A 的第二符号位移入尾数最高位；第一符号位保持不变）。&lt;/li&gt;
&lt;li&gt;若 &lt;code&gt;C_n = 0&lt;/code&gt;：不加，直接右移（把 &lt;code&gt;A&lt;/code&gt; 右移一位并把 A 的末位放入 C 的最高位）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重复 &lt;code&gt;n&lt;/code&gt; 次（n = 有效位数），最后 A 与 C 的组合就是乘积（再加上符号位 &lt;code&gt;S_P&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;说明：双符号位设计保证原码在右移过程中能保持符号扩展并把低位有序移入乘积低端（便于获得最终完整积）。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;详细示例手算x--01101--y--01011均为-正数原码表示&#34;&gt;详细示例（手算）：&lt;code&gt;X = 0.1101&lt;/code&gt; × &lt;code&gt;Y = 0.1011&lt;/code&gt;（均为 &lt;strong&gt;正数&lt;/strong&gt;，原码表示）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;说明：两个数均为 4 位小数（四位有效尾数），我们用 A 双符号位并保留 4 位小数位。初始按 PPT 约定（A：&lt;code&gt;00.0000&lt;/code&gt;，B：&lt;code&gt;00.1101&lt;/code&gt;，C：&lt;code&gt;0.1011&lt;/code&gt; 并附加 0 → &lt;code&gt;0.10110&lt;/code&gt;）。下面列出每一步的详细变化（与 PPT 示范步骤等价，但每一步写清楚）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;初始寄存器（Step 0）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;A = 00.0000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;B = 00.1101   (被乘数绝对值)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C = 0.10110   (乘数尾数 + 附加 0)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们把 C 的最右位称为 Cn（判断位）。每一步先看 Cn，再决定是否把 B 加到 A，然后右移（右移时把 A 的最低位移入 C 的最高位）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;（检查 Cn = 最右位 = 0）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C now = &lt;code&gt;0.1011 0&lt;/code&gt; → Cn (rightmost) = &lt;code&gt;0&lt;/code&gt; → 不加&lt;/li&gt;
&lt;li&gt;A 右移一位（右移前 &lt;code&gt;A = 00.0000&lt;/code&gt;，右移后仍 &lt;code&gt;00.0000&lt;/code&gt;），并把 A 的末位（0）移入 C 的最高位&lt;/li&gt;
&lt;li&gt;新寄存器：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;A = 00.0000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C (原) = 0 10110 -&amp;gt; 经过右移后，drop rightmost 0, and insert A_lowbit at left:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C = 0.01011
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;（现在 Cn = 最右位 = 1）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C = &lt;code&gt;0.01011&lt;/code&gt; → Cn = 1 → 执行 &lt;code&gt;A = A + B&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;A + B = &lt;code&gt;00.0000&lt;/code&gt; + &lt;code&gt;00.1101&lt;/code&gt; = &lt;code&gt;00.1101&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然后 A 右移一位（并将 A 的最低位移入 C 的最高位）：
&lt;ul&gt;
&lt;li&gt;右移前 A = &lt;code&gt;00.1101&lt;/code&gt; → 右移后 A = &lt;code&gt;00.0110&lt;/code&gt;（小数点右移一位；注意双符号位保持）&lt;/li&gt;
&lt;li&gt;A 的先前最低位（在 &lt;code&gt;00.1101&lt;/code&gt; 中最低位是 &lt;code&gt;1&lt;/code&gt;） 移入 C 的最高位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更新：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;A = 00.0110
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C = (after shift) 1.00101  (具体表示：原 C=0.01011 去掉最低位并在最高位放入 A_low=1)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;（检查新的 Cn）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设现在 C 的最右位 = ?（用上面得来的 &lt;code&gt;C = 1.00101&lt;/code&gt;，最右位是 &lt;code&gt;1&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;Cn = 1 → A = A + B：
&lt;ul&gt;
&lt;li&gt;当前 A = &lt;code&gt;00.0110&lt;/code&gt;，B = &lt;code&gt;00.1101&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;相加（按原码）→ &lt;code&gt;00.0011&lt;/code&gt;? 需要按位加：
&lt;code&gt;00.0110&lt;/code&gt; (0.375) + &lt;code&gt;00.1101&lt;/code&gt; (0.8125) = &lt;code&gt;1.0011&lt;/code&gt; (1.1875) —— 但注意我们用原码需要保留双符号位表示整数部分是否进位。为防混乱，我们直接按二进制算数（无符号加）得到 &lt;code&gt;1.0011&lt;/code&gt;，但在原码乘法寄存器里表现为 &lt;code&gt;00.0011&lt;/code&gt; 并产生进位移入额外位（该进位会成为 A 的整数部分，即产生跨越 1 的值）； PPT 中处理方式是直接得到 &lt;code&gt;00.1001&lt;/code&gt;（有关格式差别根据寄存器宽度会有差别）。为避免寄存器表示误导，下面给出与 PPT 一致的标准步骤（逐行与 PPT 示例对齐），并在最后给出正确的数值结果校验。（注：手工逐位累加容易在演示中因为位宽约束显得复杂，硬件实现按定宽规则处理进位）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;右移（按规则）……&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;为了让学习者能&lt;strong&gt;逐位照着做并验证数值&lt;/strong&gt;，我们把上面原码方法的&lt;strong&gt;完整逐步表格&lt;/strong&gt;以 PPT 中的经典格式直接给出（这是教材/课件常用的写法）并说明如何用十进制核对每一步。PPT 中该示例完整步骤与最终积为 &lt;code&gt;0.10001111₂&lt;/code&gt;，十进制约 &lt;code&gt;0.55859375&lt;/code&gt;（与 &lt;code&gt;0.8125×0.6875&lt;/code&gt; 一致），演算过程请参考 PPT 的寄存器变化表（已在文件内）。1.1 数据的表示、运算和校验&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;最终结果（由逐位累加移位法得）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二进制积（归一保留全部位）：&lt;code&gt;0.10001111₂&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;十进制积：&lt;code&gt;0.55859375&lt;/code&gt;（与直接浮点乘法核对一致）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;教学要点 / 易错点（原码法）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原码法实现要格外注意双符号位的定义与移位规则（PPT 中对双符号位的“第二符号位移入尾数最高位，第一符号位不变”的说明非常关键）。&lt;/li&gt;
&lt;li&gt;因为原码单独处理符号位，最终要另行设置结果符号 &lt;code&gt;S_P = S_X XOR S_Y&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;手工按“十进制思路”核对每一步很有帮助（把当前 A/C 的绝对值按十进制算一次，确认与二进制寄存器所表示的数一致）。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;b-补码一位乘法twos-complement-校正法与比较法详解--示例&#34;&gt;B. 补码一位乘法（Two&amp;rsquo;s-complement）—— 校正法与比较法（详解 + 示例）
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在实际计算机中&lt;strong&gt;补码&lt;/strong&gt;表示最常用（因为加减法可统一为加法，硬件实现简单）。补码的一位乘法需要对负数情况做适当处理，常见两种做法：&lt;strong&gt;校正法&lt;/strong&gt; 和 &lt;strong&gt;比较法&lt;/strong&gt;（后者是 Booth/邻位法的简化形式）。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;b1-校正法correction-method-思路&#34;&gt;B.1 校正法（Correction method）—— 思路
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用补码表示 &lt;code&gt;X&lt;/code&gt; 与 &lt;code&gt;Y&lt;/code&gt;（包括符号位），按位展开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;把乘数 &lt;code&gt;Y&lt;/code&gt; 写为 &lt;code&gt;Y = Y0 . Y1 Y2 ... Yn&lt;/code&gt;（补码小数形式）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若 &lt;code&gt;Y&lt;/code&gt; 为正（补码最高位 0），则可以像无符号那样计算：&lt;code&gt;(X × Y)_补 = X_补 × (0.Y1Y2...Yn)&lt;/code&gt;（不需校正）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若 &lt;code&gt;Y&lt;/code&gt; 为负（补码最高位 1），则 &lt;code&gt;Y = 1.Y1Y2...Yn&lt;/code&gt;，有 &lt;code&gt;Y = (0.Y1Y2...) + 1&lt;/code&gt; 的关系，因此：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(X × Y)_补 = X_补 × (0.Y1Y2...) + (-X)_补
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;即需要加上 &lt;code&gt;(-X)_补&lt;/code&gt;（对结果做校正）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工程实现：判断乘数符号位，按正/负两种路径处理或直接在循环中加入校正项。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;校正法直观但在硬件上不是最优（需要处理额外的 &lt;code&gt;-X&lt;/code&gt; 加法）。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;b2-比较法neighbor-bit-method--booth-like-思路ppt-的比较法&#34;&gt;B.2 比较法（neighbor-bit method / Booth-like）—— 思路（PPT 的比较法）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;比较法把校正的两种情况统一起来：通过检查乘数当前位 &lt;code&gt;Y_n&lt;/code&gt; 与下一位 &lt;code&gt;Y_{n+1}&lt;/code&gt; （即相邻两位）来决定下一步操作：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Y_n Y_{n+1} = 00&lt;/code&gt; 或 &lt;code&gt;11&lt;/code&gt; → &lt;code&gt;A = A / 2&lt;/code&gt;（即不加任何被乘数，直接右移）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Y_n Y_{n+1} = 01&lt;/code&gt; → &lt;code&gt;A = (A + X) / 2&lt;/code&gt;（做一次加 X，再右移）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Y_n Y_{n+1} = 10&lt;/code&gt; → &lt;code&gt;A = (A - X) / 2&lt;/code&gt;（做一次减 X，再右移）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始：在乘数 C 的最低位附加一个额外的 &lt;code&gt;0&lt;/code&gt;（称为 &lt;code&gt;Y_{n+1}&lt;/code&gt;），以便从第 1 步就能比较 &lt;code&gt;Y_n&lt;/code&gt; 和 &lt;code&gt;Y_{n+1}&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;这样，每一步只用到&lt;strong&gt;一位比较&lt;/strong&gt;来决定加/减/不变，避免了在负乘数时单独做校正（本质上把校正融入了位对位判断中）。这就是类似 Booth 算法的思想（但这里是补码的一位乘法的比较法描述，比较表比 Booth 表更直接）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;详细示例完全逐步补码比较法&#34;&gt;详细示例（完全逐步）：补码比较法
&lt;/h3&gt;&lt;p&gt;PPT 中给出的示例：&lt;code&gt;X = -0.1101&lt;/code&gt;，&lt;code&gt;Y = -0.1011&lt;/code&gt;，求 &lt;code&gt;(X×Y)_补&lt;/code&gt; —— 我们沿 PPT 步骤逐步演示（逐寄存器状态），并在每步写出 &lt;code&gt;Yn, Yn+1&lt;/code&gt;、采取的操作与 &lt;code&gt;A/C&lt;/code&gt; 状态（下面复现并注释每一步）。该示例与 PPT 内容逐步对齐（便于参考与核对）。1.1 数据的表示、运算和校验&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准备（格式与初值）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尾数位数为 4（示例）：我们把寄存器 A、B、C 统一表示成 &lt;code&gt;SS.fraction&lt;/code&gt; 的格式（双符号位的 A、B；C 为含附加位的乘数）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X = -0.1101&lt;/code&gt; 的补码：写出 &lt;code&gt;X_補&lt;/code&gt;（补码需先计算）：
&lt;ul&gt;
&lt;li&gt;先写绝对值 &lt;code&gt;0.1101&lt;/code&gt; → 原码 &lt;code&gt;0 1101&lt;/code&gt;，取反再加 1 得到补码（此处 PPT 给出 &lt;code&gt;B = 11.0011&lt;/code&gt;（双符号位表示））。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Y = -0.1011&lt;/code&gt; 的补码 &lt;code&gt;C&lt;/code&gt; 初值（带附加 0）为 &lt;code&gt;1.0101&lt;/code&gt;（并在末位添 0 得 &lt;code&gt;1.01010&lt;/code&gt;）—— 具体 bit 布局见 PPT。&lt;/li&gt;
&lt;li&gt;初始 A = &lt;code&gt;00.0000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;逐步表（示例来自 PPT，已做行注释）&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我把 PPT 中的步表精炼并保留关键寄存器值、操作与理由（如果你想完整的每一行二进制变化也可要求把 PPT 表格按原格式导出）。下面每行写明步号、&lt;code&gt;Yn Yn+1&lt;/code&gt; 判别、采取何操作、以及 A 和 C 的新值。&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;初值:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;A = 00.0000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;B = X_补 = 11.0011    (-0.1101 的补码；参见 PPT)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-B = (-X)_補 = 00.1101
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C = Y_補 + append 0 = 1.01010
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;步 1: (检查 C 的最低两位 Y_n, Y_n+1)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; C 的末两位 = (1 0) =&amp;gt; 表示 10 -&amp;gt; 执行 A = A + (-X)_補 , 右移
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  操作: A = 00.0000 + 00.1101 = 00.1101
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  右移后: A -&amp;gt; 00.0110    （并把 A_lsb 移入 C 高位）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  C 更新为: 1.0101 (低位进位已被移除/更新)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;步 2:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; C 的末两位 = (1 1) =&amp;gt; 11 -&amp;gt; 执行 A = A / 2 （不加）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  操作: 不加，直接右移 A: 00.0110 -&amp;gt; 00.0011
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  C 更新: 11.1001（见 PPT 步表具体位移动）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;步 3:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; C 的末两位 = (1 0) =&amp;gt; 10 -&amp;gt; 执行 A = A + (-X)_補 ，右移
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  A = 00.0011 + 00.1101 = 00.1000  (按补码规则)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  右移: A -&amp;gt; 00.0100
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  C 更新: ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;步 4:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; C 的末两位 = (0 1) =&amp;gt; 01 -&amp;gt; 执行 A = A + X_補 ，右移
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  A = 00.0100 + 11.0011 = 11.0111
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  右移: A -&amp;gt; 11.1011
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  C 更新: ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;步 5:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; C 的末两位 = (1 0) =&amp;gt; 10 -&amp;gt; 执行 A = A + (-X)_補 ，右移
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  A = 11.1011 + 00.1101 = 00.1000 （注意补码加法与截断）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  最终 A = 00.1000  （最后可能需要修正）
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;上表每一步的二进制加法与移位都严格按补码算术进行（PPT 中以寄存器视角给出了完整的中间 A/C 值；上面是精简注释版，便于理解整体流程）。完整逐位寄存器走位（与 PPT 行对应）见文件页中“运算实例”的表格，可用于逐行复核。1.1 数据的表示、运算和校验&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;最后的修正（若需要）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有时比较法在最后需要做一次修正（PPT 示例中有一步“修正( XY )_補”），那通常是针对寄存器宽度截断或末位进位问题。实际硬件在设计时会分配足够位宽以避免丢失信息，或在最后一步加入溢出/修正判断。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;核验数值（十进制）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;示例：&lt;code&gt;X = -0.1101₂ = -0.8125&lt;/code&gt;，&lt;code&gt;Y = -0.1011₂ = -0.6875&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;真值 &lt;code&gt;X × Y = (-0.8125) × (-0.6875) = +0.55859375&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;因为两个负号相乘为正，最终补码寄存器 &lt;code&gt;A/C&lt;/code&gt; 的表示在解码成真值时应等于 &lt;code&gt;+0.55859375&lt;/code&gt;（即与上面原码例子得到的正值相同），这也是比较法正确性的十进制核对方法。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Computer Organization Note Part I</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-part-i/</link>
        <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-part-i/</guid>
        <description>&lt;h1 id=&#34;计算机组成原理概论&#34;&gt;《计算机组成原理》概论
&lt;/h1&gt;&lt;h2 id=&#34;1-计算机系统的基本组成与特点&#34;&gt;1. 计算机系统的基本组成与特点
&lt;/h2&gt;&lt;h3 id=&#34;11-电子数字计算机的基本组成&#34;&gt;1.1 电子数字计算机的基本组成
&lt;/h3&gt;&lt;p&gt;电子计算机是一种能够自动、高速、精确地对数字信息进行存储、计算以及输出的电子设备。其基本组成包括五大部件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;运算器 (Arithmetic Unit)&lt;/strong&gt;: 执行算术和逻辑运算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制器 (Control Unit)&lt;/strong&gt;: 计算机的指挥中心，负责协调各个部件工作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储器 (Memory)&lt;/strong&gt;: 用于存放数据和程序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入设备 (Input Device)&lt;/strong&gt;: 将外部信息（如程序、数据）转换成计算机能识别的形式并输入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出设备 (Output Device)&lt;/strong&gt;: 将计算机处理的结果以人类可识别的形式（如文字、图像）展现出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;数据流&lt;/strong&gt;: 计算机加工处理的对象（数据）。 &lt;strong&gt;控制流&lt;/strong&gt;: 控制计算机工作的信息（指令）。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;12-信息的数字化表示&#34;&gt;1.2 信息的数字化表示
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数字代码表示&lt;/strong&gt;: 计算机内部的所有信息（包括数据和指令）都使用二进制数字代码来表示。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据&lt;/strong&gt;: 数值（&lt;code&gt;5&lt;/code&gt; -&amp;gt; &lt;code&gt;0 101&lt;/code&gt;）、字符（&lt;code&gt;A&lt;/code&gt; -&amp;gt; &lt;code&gt;1000001&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命令/状态&lt;/strong&gt;: 启动、停止等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物理信号表示&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模拟信号&lt;/strong&gt;: 随时间连续变化的信号，存在精度低、抗干扰能力弱等问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数字信号&lt;/strong&gt;: 在时间或空间上断续变化的信号，计算机采用数字信号来表示二进制代码。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;电平信号&lt;/strong&gt;: 用高、低两种电平状态表示 &lt;code&gt;1&lt;/code&gt; 和 &lt;code&gt;0&lt;/code&gt;，适合并行操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;脉冲信号&lt;/strong&gt;: 用脉冲的有无表示 &lt;code&gt;1&lt;/code&gt; 和 &lt;code&gt;0&lt;/code&gt;，适合串行操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;13-存储程序与冯诺依曼体制&#34;&gt;1.3 存储程序与冯·诺依曼体制
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;存储程序方式&lt;/strong&gt;: 将预先编写好的程序和数据存入计算机存储器中，然后启动计算机，使其能够自动、连续地执行程序指令。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工作流程&lt;/strong&gt;: 编写程序 -&amp;gt; 输入程序 -&amp;gt; 存储程序 -&amp;gt; 执行指令 -&amp;gt; 输出结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动执行&lt;/strong&gt;: 通过 &lt;strong&gt;程序计数器 (PC)&lt;/strong&gt; 来自动存取和执行指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;冯·诺依曼体系结构核心思想&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;二进制表示&lt;/strong&gt;: 程序和数据都用二进制代码表示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储程序&lt;/strong&gt;: 将程序和数据一同存放在存储器中，计算机能自动执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;五大部件&lt;/strong&gt;: 计算机硬件由运算器、控制器、存储器、输入设备和输出设备五部分组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;14-数字计算机的特点&#34;&gt;1.4 数字计算机的特点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;能在程序控制下自动连续工作。&lt;/li&gt;
&lt;li&gt;运算速度快。&lt;/li&gt;
&lt;li&gt;运算精度高。&lt;/li&gt;
&lt;li&gt;具有很强的信息存储能力。&lt;/li&gt;
&lt;li&gt;通用性强。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-计算机系统的硬件组成&#34;&gt;2. 计算机系统的硬件组成
&lt;/h2&gt;&lt;h3 id=&#34;21-硬件系统基本组成模型&#34;&gt;2.1 硬件系统基本组成模型
&lt;/h3&gt;&lt;p&gt;现代计算机硬件系统通常以CPU为核心，通过系统总线连接主存储器（M）、输入输出设备（I/O）及其接口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU (中央处理器)&lt;/strong&gt;: 由运算器、控制器和寄存器组构成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;各部件功能&#34;&gt;各部件功能
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;运算器&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;: 执行算术运算和逻辑运算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组成&lt;/strong&gt;: 算术逻辑单元(ALU)、通用寄存器组、移位器等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制器&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;: 根据指令信息、状态信息和时序信号，产生控制微命令，控制整个计算机的操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组成&lt;/strong&gt;: 微命令发生器等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储器&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;: 存储二进制的数据和程序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三级存储体系&lt;/strong&gt;: 为平衡速度、容量和成本，采用 &lt;strong&gt;Cache -&amp;gt; 主存 -&amp;gt; 外存&lt;/strong&gt; 的层次结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入/输出设备 (I/O设备)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;: 实现信息的转换。输入设备将原始信息转为内部代码，输出设备将处理结果代码转为人类可识别的形式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;总线 (Bus)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;: 为多个部件分时共享的信息传送线路。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分类&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据总线 (DB)&lt;/strong&gt;: 传送数据信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地址总线 (AB)&lt;/strong&gt;: 指定信息来源或目的地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制总线 (CB)&lt;/strong&gt;: 管理和控制总线活动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接口 (Interface)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;: 主机与外设之间的连接逻辑，负责缓冲、转换和控制外设的I/O操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-计算机系统的软件组成&#34;&gt;3. 计算机系统的软件组成
&lt;/h2&gt;&lt;h3 id=&#34;31-软件分类&#34;&gt;3.1 软件分类
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统程序&lt;/strong&gt;: 负责系统管理、调度和提供服务，如操作系统、语言处理程序、数据库管理系统等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用程序&lt;/strong&gt;: 为解决特定应用问题而编制的程序，如设计软件、办公软件等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-软硬件系统层次结构&#34;&gt;3.2 软硬件系统层次结构
&lt;/h3&gt;&lt;p&gt;计算机系统是一个多层次的结构，从底层硬件到上层应用软件，层层构建。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;硬件部分&lt;/strong&gt;: 硬件逻辑级、微程序级。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;软硬分界面&lt;/strong&gt;: 传统机器级（指令系统）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;软件部分&lt;/strong&gt;: 操作系统级、语言处理程序级、应用程序级等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-编程语言与处理程序&#34;&gt;3.3 编程语言与处理程序
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;编程语言&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;机器语言&lt;/strong&gt;: 计算机唯一能直接执行的二进制代码语言。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;汇编语言&lt;/strong&gt;: 使用助记符（如 &lt;code&gt;ADD&lt;/code&gt;, &lt;code&gt;SUB&lt;/code&gt;）表示机器指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高级语言&lt;/strong&gt;: 类似自然语言，易于编写和理解。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;语言处理程序&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;汇编程序&lt;/strong&gt;: 将汇编语言翻译成机器语言。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;翻译程序&lt;/strong&gt;: 将高级语言翻译成机器语言。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编译程序&lt;/strong&gt;: 一次性将整个源程序翻译成目标程序，然后执行目标程序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解释程序&lt;/strong&gt;: 翻译一条源程序语句就立即执行一条，不生成独立的目标文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-计算机系统的性能指标&#34;&gt;4. 计算机系统的性能指标
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基本字长&lt;/strong&gt;: 计算机一次定点运算所能处理的二进制位数（如32位、64位），影响计算精度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时钟频率&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;外频 (基频)&lt;/strong&gt;: 系统总线的工作频率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU主频&lt;/strong&gt;: &lt;code&gt;CPU主频 = 外频 × 倍频系数&lt;/code&gt;。主频越高，运算速度越快。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运算速度&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPI (Clock-cycle Per Instruction)&lt;/strong&gt;: 执行一条指令所需的平均时钟周期数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPS (Instructions Per Second)&lt;/strong&gt;: 每秒执行的指令条数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FLOPS (Floating-point Operations Per Second)&lt;/strong&gt;: 每秒执行的浮点运算次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据传输率 (带宽)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;: 数据总线每秒传送的数据量（单位: B/S）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;公式&lt;/strong&gt;: &lt;code&gt;数据传输率 = (数据通路宽度 × 总线时钟频率) / 8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储器容量&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主存容量&lt;/strong&gt;: &lt;code&gt;主存容量 = 编址的存储单元个数 × 存储单元宽度&lt;/code&gt;。由地址总线位数决定可寻址空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外存容量&lt;/strong&gt;: 通常指硬盘、SSD等存储设备的总容量，与地址总线无关。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;硬盘格式化容量&lt;/strong&gt;: &lt;code&gt;面数 × (道数/面) × (扇区数/道) × (字节数/扇区)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-本章小结与思考&#34;&gt;5. 本章小结与思考
&lt;/h2&gt;&lt;h3 id=&#34;重点内容&#34;&gt;重点内容
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;冯诺依曼体系的三大核心思想。&lt;/li&gt;
&lt;li&gt;存储程序的工作方式原理。&lt;/li&gt;
&lt;li&gt;计算机硬件系统的五大基本组成及其功能。&lt;/li&gt;
&lt;li&gt;计算机性能指标的定义与计算：基本字长、主频、CPI、IPS、FLOPS、数据传输率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;思考题&#34;&gt;思考题
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;计算机如何区分同样由0和1代码组成的 &lt;strong&gt;数据&lt;/strong&gt; 和 &lt;strong&gt;指令&lt;/strong&gt;？
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提示&lt;/strong&gt;: 计算机通过不同的 &lt;strong&gt;时间&lt;/strong&gt; 和 &lt;strong&gt;空间&lt;/strong&gt; 来区分。在取指令阶段（由控制器控制）从存储器取出的就是指令；在执行指令阶段（由指令指定）访问存储器得到的就是数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Computer Organization Note Special I</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-special-i/</link>
        <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-special-i/</guid>
        <description>&lt;h1 id=&#34;计算机性能指标计算详解与实例&#34;&gt;计算机性能指标计算详解与实例
&lt;/h1&gt;&lt;p&gt;为了更好地评估一台计算机的性能，我们会使用一系列量化指标。理解这些指标的计算方法是掌握计算机组成原理的关键。下面我们将逐一解析您提到的几个重要性能指标。&lt;/p&gt;
&lt;h3 id=&#34;1-cpu主频-cpu-clock-speed&#34;&gt;1. CPU主频 (CPU Clock Speed)
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;文字描述:&lt;/strong&gt; CPU主频是衡量CPU运算速度的一个重要指标，它表示CPU内部的时钟信号频率。但CPU并不是直接连接到系统的一个固定频率时钟上，而是通过一个“倍频”技术来实现的。系统主板提供一个基础频率，称为&lt;strong&gt;外频 (Front Side Bus, FSB)&lt;/strong&gt;，CPU内部再将这个外频乘以一个倍数（&lt;strong&gt;倍频系数&lt;/strong&gt;），得到的就是CPU最终的工作频率，即主频。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算公式:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CPU主频=外频×倍频系数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单位:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;频率的单位是赫兹 (Hz)。&lt;/li&gt;
&lt;li&gt;常用的单位有兆赫兹 (MHz, 106 Hz) 和吉赫兹 (GHz, 109 Hz)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;计算实例:&lt;/strong&gt; 假设某台计算机的主板外频为 &lt;strong&gt;100 MHz&lt;/strong&gt;，其CPU的倍频系数为 &lt;strong&gt;32&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;计算过程:&lt;/strong&gt; &lt;code&gt;CPU主频 = 100 MHz × 32 = 3200 MHz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果:&lt;/strong&gt; 这颗CPU的主频是 &lt;strong&gt;3200 MHz&lt;/strong&gt;，也就是 &lt;strong&gt;3.2 GHz&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-运算速度-cpi-ipsmips&#34;&gt;2. 运算速度 (CPI, IPS/MIPS)
&lt;/h3&gt;&lt;h4 id=&#34;21-平均cpi-cycles-per-instruction&#34;&gt;2.1 平均CPI (Cycles Per Instruction)
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;文字描述:&lt;/strong&gt; CPI指的是“执行每条指令所需的平均时钟周期数”。为什么是平均值呢？因为计算机指令的类型有很多（如数据传输、算术运算、逻辑运算等），不同类型的指令执行起来的复杂程度不同，所需要的时间（时钟周期）也不同。因此，我们需要根据一个程序中各类指令的占比来计算一个加权平均值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算公式:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;平均CPI=i=1∑n(第 i 类指令的CPI×其在程序中的占比)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算实例 (源自您的PPT):&lt;/strong&gt; 假设一个程序包含四类指令，其CPI和占比如下表所示：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;指令类型&lt;/th&gt;
          &lt;th&gt;在程序中的占比&lt;/th&gt;
          &lt;th&gt;该类指令的CPI&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;传输类指令&lt;/td&gt;
          &lt;td&gt;40%&lt;/td&gt;
          &lt;td&gt;15&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;双操作数指令&lt;/td&gt;
          &lt;td&gt;30%&lt;/td&gt;
          &lt;td&gt;20&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;单操作数指令&lt;/td&gt;
          &lt;td&gt;20%&lt;/td&gt;
          &lt;td&gt;15&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;转移类指令&lt;/td&gt;
          &lt;td&gt;10%&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;计算过程:&lt;/strong&gt; &lt;code&gt;平均CPI = (15 × 0.40) + (20 × 0.30) + (15 × 0.20) + (10 × 0.10)&lt;/code&gt; &lt;code&gt;平均CPI = 6 + 6 + 3 + 1 = 16&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果:&lt;/strong&gt; 执行该程序时，CPU平均执行一条指令需要 &lt;strong&gt;16&lt;/strong&gt; 个时钟周期。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-ips--mips-instructions-per-second&#34;&gt;2.2 IPS / MIPS (Instructions Per Second)
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;文字描述:&lt;/strong&gt; IPS指的是“每秒钟能执行多少条指令”。这个指标结合了CPU的主频和平均CPI，能更全面地反映CPU的运算速度。因为主频高但执行每条指令耗时（CPI高）的CPU，其整体性能不一定强。MIPS则是指“每秒百万条指令”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算公式:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IPS=平均CPICPU主频&lt;/p&gt;
&lt;p&gt;MIPS=106IPS=平均CPI主频 (MHz)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算实例:&lt;/strong&gt; 我们沿用上面的例子，假设CPU主频为 &lt;strong&gt;3.2 GHz&lt;/strong&gt; (即 3200 MHz 或 3.2×109 Hz)，计算出的平均CPI为 &lt;strong&gt;16&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;计算过程 (IPS):&lt;/strong&gt; &lt;code&gt;IPS = (3.2 × 10^9 Hz) / 16 = 200,000,000 条指令/秒&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算过程 (MIPS):&lt;/strong&gt; &lt;code&gt;MIPS = (3200 MHz) / 16 = 200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果:&lt;/strong&gt; 该CPU的运算速度为 &lt;strong&gt;2亿条指令/秒&lt;/strong&gt;，或者说 &lt;strong&gt;200 MIPS&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-数据传输率-data-transfer-rate--bandwidth&#34;&gt;3. 数据传输率 (Data Transfer Rate / Bandwidth)
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;文字描述:&lt;/strong&gt; 数据传输率，也叫带宽，衡量的是计算机中总线（连接各个部件的数据通道）传输数据的能力，即每秒钟能够传输多少字节的数据。它主要取决于两个因素：&lt;strong&gt;数据总线的宽度&lt;/strong&gt;（一次能同时传输多少位数据）和&lt;strong&gt;总线的时钟频率&lt;/strong&gt;（一秒钟能传输多少次）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算公式:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据传输率 (B/s)=8数据总线宽度 (bit)×总线时钟频率 (Hz)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 公式中的 &lt;code&gt;8&lt;/code&gt; 是因为 &lt;code&gt;1 Byte = 8 bits&lt;/code&gt;，用于将 &lt;code&gt;bit/s&lt;/code&gt; 转换为 &lt;code&gt;Byte/s&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算实例:&lt;/strong&gt; 假设某计算机的数据总线宽度为 &lt;strong&gt;64位 (bit)&lt;/strong&gt;，总线时钟频率（外频）为 &lt;strong&gt;800 MHz&lt;/strong&gt; (即 800×106 Hz)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;计算过程:&lt;/strong&gt; &lt;code&gt;数据传输率 = (64 bit × 800,000,000 Hz) / 8&lt;/code&gt; &lt;code&gt;数据传输率 = 8 × 800,000,000 B/s = 6,400,000,000 B/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果:&lt;/strong&gt; 该总线的数据传输率为 &lt;strong&gt;6,400,000,000 B/s&lt;/strong&gt;，也就是 &lt;strong&gt;6400 MB/s&lt;/strong&gt; 或 &lt;strong&gt;6.4 GB/s&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-硬盘格式化容量-formatted-hard-drive-capacity&#34;&gt;4. 硬盘格式化容量 (Formatted Hard Drive Capacity)
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;文字描述:&lt;/strong&gt; 这个公式用于计算老式机械硬盘（HDD）的存储容量。硬盘由多个盘片（面）组成，每个盘面上有很多同心圆，称为磁道，每个磁道又被划分为若干个扇区，扇区是数据读写的最小单位。总容量就是将所有扇区的容量加起来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算公式:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;格式化容量=磁头数(面数)×面磁道数×道扇区数×扇区字节数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算实例:&lt;/strong&gt; 假设一个硬盘有以下参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;磁头数 (面数)&lt;/strong&gt;: 4 个 (通常一个盘片有2个面)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个面的磁道数&lt;/strong&gt;: 1024 个&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个磁道的扇区数&lt;/strong&gt;: 63 个&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个扇区的字节数&lt;/strong&gt;: 512 Bytes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算过程:&lt;/strong&gt; &lt;code&gt;总容量 = 4 (面) × 1024 (道/面) × 63 (扇区/道) × 512 (字节/扇区)&lt;/code&gt; &lt;code&gt;总容量 = 132,120,576 Bytes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果与单位换算:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;132,120,576 Bytes / 1024 = 129,024 KB (千字节)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;129,024 KB / 1024 ≈ 126 MB (兆字节)&lt;/code&gt; 所以，这个硬盘的格式化容量大约是 &lt;strong&gt;126 MB&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Japanese Note</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/p/japanese-note/</link>
        <pubDate>Tue, 30 Sep 2025 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/p/japanese-note/</guid>
        <description>&lt;h1 id=&#34;day-1&#34;&gt;Day 1
&lt;/h1&gt;&lt;h2 id=&#34;1-动词时态过去式&#34;&gt;1. 动词时态：过去式
&lt;/h2&gt;&lt;h3 id=&#34;11-规则&#34;&gt;1.1 规则
&lt;/h3&gt;&lt;p&gt;日语动词的礼貌体 (ます形) 本身可以表达现在习惯或将来的动作。为了描述过去已经发生的动作，需要将词尾进行变换。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;肯定句 (做了某事)&lt;/strong&gt;: 将词尾的 ます 变为 &lt;strong&gt;ました&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;否定句 (没做某事)&lt;/strong&gt;: 将词尾的 ません 变为 &lt;strong&gt;ませんでした&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-范例&#34;&gt;1.2 范例
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将来&lt;/strong&gt;: 明日、パンを食べます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过去&lt;/strong&gt;: 昨日、パンを食べました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将来否定&lt;/strong&gt;: 明日、学校へ行きません。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过去否定&lt;/strong&gt;: 昨日、学校へ行きませんでした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-相关词汇&#34;&gt;1.3 相关词汇
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;今日 (きょう): 今天&lt;/li&gt;
&lt;li&gt;昨日 (きのう): 昨天&lt;/li&gt;
&lt;li&gt;明日 (あした): 明天&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-形容词系统&#34;&gt;2. 形容词系统
&lt;/h2&gt;&lt;h3 id=&#34;21-核心概念为何分为两类&#34;&gt;2.1 核心概念：为何分为两类？
&lt;/h3&gt;&lt;p&gt;日语的形容词分为 い形容词 和 な形容词 两大类，是因为它们的词源和语法功能完全不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;い形容词&lt;/strong&gt;: 是日语的“原生词汇”，自古以来就作为形容词使用，拥有类似动词的“活用”能力，即词尾本身可以变化来表达否定、过去等含义。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;な形容词&lt;/strong&gt;: 大多是源于中文的“汉字词”，本质上更像名词。它们自身无法变化，需要借助助词 な 或助动词 です 来发挥形容词的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-两类形容词的用法区别&#34;&gt;2.2 两类形容词的用法区别
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;场景&lt;/th&gt;
          &lt;th&gt;い形容词&lt;/th&gt;
          &lt;th&gt;な形容词&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;直接修饰名词&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;直接连接&lt;/strong&gt; おいしいパン&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;中间加 な&lt;/strong&gt; 静かな図書館&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;在句末作谓语&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;自身可独立&lt;/strong&gt; (です只为表礼貌) この映画は面白い。&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;必须和です/だ连用&lt;/strong&gt; 図書館は静かです。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;23-活用变形规则详解&#34;&gt;2.3 活用/变形规则详解
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类型&lt;/th&gt;
          &lt;th&gt;时态&lt;/th&gt;
          &lt;th&gt;肯定&lt;/th&gt;
          &lt;th&gt;否定&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;い形容词&lt;/strong&gt; (例: 面白い)&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;现在&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;面白いです&lt;/td&gt;
          &lt;td&gt;面白くないです&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;过去&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;面白かったです&lt;/td&gt;
          &lt;td&gt;面白くなかったです&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;な形容词&lt;/strong&gt; (例: 静か)&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;现在&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;静かです&lt;/td&gt;
          &lt;td&gt;静かじゃありません&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;过去&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;静かでした&lt;/td&gt;
          &lt;td&gt;静かじゃありませんでした&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;24-相关词汇&#34;&gt;2.4 相关词汇
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;い形容词&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;おいしい: 好吃的&lt;/li&gt;
&lt;li&gt;高い (たかい): 贵的, 高的&lt;/li&gt;
&lt;li&gt;新しい (あたらしい): 新的&lt;/li&gt;
&lt;li&gt;面白い (おもしろい): 有趣的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;な形容词&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;元気 (げんき): 健康的, 有活力的&lt;/li&gt;
&lt;li&gt;きれい: 漂亮的, 干净的&lt;/li&gt;
&lt;li&gt;静か (しずか): 安静的&lt;/li&gt;
&lt;li&gt;有名 (ゆうめい): 有名的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;名词及其他&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;この: 这个&lt;/li&gt;
&lt;li&gt;映画 (えいが): 电影&lt;/li&gt;
&lt;li&gt;図書館 (としょかん): 图书馆&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-助词-で-与-に&#34;&gt;3. 助词 で 与 に
&lt;/h2&gt;&lt;h3 id=&#34;31-助词-で&#34;&gt;3.1 助词 で
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;功能一：表示动作发生的场所&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;讲解&lt;/strong&gt;: で 用于标记一个动作在“哪里”发生，是动作的“舞台”。需要和表示移动目的地的 へ 区分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范例&lt;/strong&gt;: 私 は 図書館 で 勉強します。 - 我&lt;strong&gt;在&lt;/strong&gt;图书馆学习。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能二：表示方法、手段、工具&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;讲解&lt;/strong&gt;: で 用于标记完成一个动作所使用的“工具”或“方法”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范例&lt;/strong&gt;: バス で 会社 へ 行きます。 - 我&lt;strong&gt;坐&lt;/strong&gt;巴士去公司。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;32-助词-に&#34;&gt;3.2 助词 に
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;功能：标记动作发生的具体时间点&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;讲解&lt;/strong&gt;: に 像一个图钉，把动作精确地“钉”在某个时间点上，通常是带有数字的时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范例&lt;/strong&gt;: 朝、7時 に 起きます。 - 我早上&lt;strong&gt;在&lt;/strong&gt;7点起床。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重要提示&lt;/strong&gt;: 相对时间词如 今日 (今天), 昨日 (昨天) 等后面&lt;strong&gt;不加&lt;/strong&gt; に。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;33-相关词汇&#34;&gt;3.3 相关词汇
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;勉強します (べんきょうします): 学习&lt;/li&gt;
&lt;li&gt;バス: 巴士&lt;/li&gt;
&lt;li&gt;箸 (はし): 筷子&lt;/li&gt;
&lt;li&gt;7時 (しちじ): 7点&lt;/li&gt;
&lt;li&gt;起きます (おきます): 起床&lt;/li&gt;
&lt;li&gt;カフェ: 咖啡馆&lt;/li&gt;
&lt;li&gt;コーヒー: 咖啡&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-提问与回答&#34;&gt;4. 提问与回答
&lt;/h2&gt;&lt;h3 id=&#34;41-使用疑问词提问&#34;&gt;4.1 使用疑问词提问
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;讲解&lt;/strong&gt;: 用疑问词替换掉你想提问的部分，句末保留 か。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范例&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;原句: カフェでコーヒーを飲みます。&lt;/li&gt;
&lt;li&gt;问地点: どこでコーヒーを飲みますか。&lt;/li&gt;
&lt;li&gt;问对象: カフェで何を食べますか。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42-疑问词词汇&#34;&gt;4.2 疑问词词汇
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;何 (なに/なん): 什么&lt;/li&gt;
&lt;li&gt;どこ: 哪里&lt;/li&gt;
&lt;li&gt;いつ: 何时&lt;/li&gt;
&lt;li&gt;誰 (だれ): 谁&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;day-2&#34;&gt;Day 2
&lt;/h1&gt;&lt;h2 id=&#34;1-存在动词あります--います&#34;&gt;1. 存在动词：あります &amp;amp; います
&lt;/h2&gt;&lt;h3 id=&#34;11-核心概念&#34;&gt;1.1 核心概念
&lt;/h3&gt;&lt;p&gt;日语在表达“有”或“在”的概念时，会根据主体的性质使用两个不同的动词。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;あります&lt;/strong&gt;: 用于&lt;strong&gt;非生命体&lt;/strong&gt; (物品、植物、抽象概念等)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;います&lt;/strong&gt;: 用于&lt;strong&gt;生命体&lt;/strong&gt; (人、动物等)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-句型一描述存在-location&#34;&gt;1.2 句型一：描述存在 (Location)
&lt;/h3&gt;&lt;p&gt;结构: &lt;strong&gt;场所 に 主体 が あります / います。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;助词 に&lt;/strong&gt;: 在此句型中，表示主体存在的&lt;strong&gt;地点&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;助词 が&lt;/strong&gt;: 用于引出首次被提及或作为存在焦点的&lt;strong&gt;主体&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;范例&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非生命体&lt;/strong&gt;: 机の上に本があります。 (桌子上有书。)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生命体&lt;/strong&gt;: 公園に子供がいます。 (公园里有小孩。)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-句型二描述拥有-possession&#34;&gt;1.3 句型二：描述拥有 (Possession)
&lt;/h3&gt;&lt;p&gt;结构: &lt;strong&gt;拥有者 は 所有物 が あります / います。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;范例&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;拥有物品&lt;/strong&gt;: 私は車があります。 (我有一辆车。)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥有生命&lt;/strong&gt;: 私は猫がいます。 (我有一只猫。)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;14-疑问形式&#34;&gt;1.4 疑问形式
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;疑问词疑问句&lt;/strong&gt; 用疑问词替换想提问的部分，句末保留 &lt;strong&gt;か&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提问非生命体 (用 何 なに)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问句&lt;/strong&gt;: 冷蔵庫の中に何がありますか。 (冰箱里有什么？)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提问生命体 (用 誰 だれ)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问句&lt;/strong&gt;: 教室に誰がいますか。 (教室里有谁？)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;15-相关词汇&#34;&gt;1.5 相关词汇
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;机 (つくえ): 桌子&lt;/li&gt;
&lt;li&gt;上 (うえ): 上面&lt;/li&gt;
&lt;li&gt;本 (ほん): 书&lt;/li&gt;
&lt;li&gt;公園 (こうえん): 公园&lt;/li&gt;
&lt;li&gt;子供 (こども): 小孩&lt;/li&gt;
&lt;li&gt;車 (くるま): 车&lt;/li&gt;
&lt;li&gt;猫 (ねこ): 猫&lt;/li&gt;
&lt;li&gt;冷蔵庫 (れいぞうこ): 冰箱&lt;/li&gt;
&lt;li&gt;中 (なか): 里面&lt;/li&gt;
&lt;li&gt;卵 (たまご): 鸡蛋&lt;/li&gt;
&lt;li&gt;犬 (いぬ): 狗&lt;/li&gt;
&lt;li&gt;椅子 (いす): 椅子&lt;/li&gt;
&lt;li&gt;下 (した): 下面&lt;/li&gt;
&lt;li&gt;教室 (きょうしつ): 教室&lt;/li&gt;
&lt;li&gt;先生 (せんせい): 老师&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动词て形-te-form&#34;&gt;动词て形 (Te-Form)
&lt;/h2&gt;&lt;h3 id=&#34;1-て形的核心概念&#34;&gt;1. て形的核心概念
&lt;/h3&gt;&lt;p&gt;动词的て形 (Te-Form) 是日语语法中的一个核心变形，它本身不表示时态或礼貌程度。其主要功能是作为“连接器”，将句子中的各个部分连接起来，实现更复杂的表达。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其主要用途包括：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;连接有时序关系的多个动作 (本次学习重点)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;请求或许可 (例: 食べてください - 请吃)&lt;/li&gt;
&lt;li&gt;描述持续的状态 (例: 知っています - 我知道)&lt;/li&gt;
&lt;li&gt;说明原因或方式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;掌握て形是日语能力从中级向高级迈进的关键一步。&lt;/p&gt;
&lt;h3 id=&#34;2-前置步骤动词分类&#34;&gt;2. 前置步骤：动词分类
&lt;/h3&gt;&lt;p&gt;要正确地将动词变为て形，必须先准确判断其所属类别。日语动词根据其ます形的构成，可分为三类。&lt;/p&gt;
&lt;h4 id=&#34;21-动词分类诊断流程&#34;&gt;&lt;strong&gt;2.1 动词分类诊断流程&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;第一步：判断是否为“第三类动词” (不规则动词)&lt;/strong&gt; 第三类动词只有两个，以及由它们构成的复合动词。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;します: (做)&lt;/li&gt;
&lt;li&gt;来ます (きます): (来)&lt;/li&gt;
&lt;li&gt;复合动词: 所有以“名词+します”构成的动词，如 勉強します (学习), 買い物します (购物) 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第二步：观察ます前的假名元音，区分第一类与第二类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;若动词不属于第三类，则观察ます前的假名。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如果元音为 え (e段音):&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;该动词 &lt;strong&gt;必定为第二类动词&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;例: 食べます (た&lt;strong&gt;べ&lt;/strong&gt;ます), 教えます (おし&lt;strong&gt;え&lt;/strong&gt;ます), 寝ます (&lt;strong&gt;ね&lt;/strong&gt;ます)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果元音为 い (i段音):&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;该动词&lt;strong&gt;可能是第一类，也可能是第二类&lt;/strong&gt;。这是需要重点区分的区域。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;判断方法&lt;/strong&gt;: 大部分情况下是第一类动词。但需记住少数例外，这些例外属于第二类动词。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;【例外】须特殊记忆的第二类动词 (ます前为い段音)&lt;/strong&gt; 以下动词虽然形式上符合第一类特征，但实际属于第二类，其变化规则遵循第二类动词。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;見ます (みます): 看&lt;/li&gt;
&lt;li&gt;起きます (おきます): 起床&lt;/li&gt;
&lt;li&gt;います: 在 (生命体)&lt;/li&gt;
&lt;li&gt;浴びます (あびます): 淋浴&lt;/li&gt;
&lt;li&gt;降ります (おります): 下 (车、山等)&lt;/li&gt;
&lt;li&gt;借ります (かります): 借入&lt;/li&gt;
&lt;li&gt;できます: 能够、会&lt;/li&gt;
&lt;li&gt;過ぎます (すぎます): 经过、过度&lt;/li&gt;
&lt;li&gt;着ます (きます): 穿 (上半身衣物)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第三步：得出结论&lt;/strong&gt; 如果一个ます前为い段音的动词&lt;strong&gt;不&lt;/strong&gt;在上述例外列表中，那么它就是&lt;strong&gt;第一类动词&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例: 書きます (か&lt;strong&gt;き&lt;/strong&gt;ます), 飲みます (の&lt;strong&gt;み&lt;/strong&gt;ます), 会います (あ&lt;strong&gt;い&lt;/strong&gt;ます) 均为第一类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-动词分类流程图&#34;&gt;&lt;strong&gt;2.2 动词分类流程图&lt;/strong&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[新动词]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ↓
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;是 します/来ます 吗? --(是)--&amp;gt; [第三类动词]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ↓ (否)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ます前的元音是 え 吗? --(是)--&amp;gt; [第二类动词]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ↓ (否, 元音必为 い)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;在“例外列表”中吗? --(是)--&amp;gt; [第二类动词]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ↓ (否)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[第一类动词]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;3-て形变化规则&#34;&gt;3. て形变化规则
&lt;/h3&gt;&lt;h4 id=&#34;31-第一类动词-五段动词&#34;&gt;&lt;strong&gt;3.1 第一类动词 (五段动词)&lt;/strong&gt;
&lt;/h4&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;ます前的假名&lt;/th&gt;
          &lt;th&gt;变化规则&lt;/th&gt;
          &lt;th&gt;范例 (ます形 → て形)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;い, ち, り&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;变为 &lt;strong&gt;って&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;会います → 会って / 待ちます → 待って&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;み, に, び&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;变为 &lt;strong&gt;んで&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;飲みます → 飲んで / 死にます → 死んで&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;き&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;变为 &lt;strong&gt;いて&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;書きます → 書いて&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;ぎ&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;变为 &lt;strong&gt;いで&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;泳ぎます → 泳いで&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;し&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;变为 &lt;strong&gt;して&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;話します → 話して&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;特殊例外: 行きます&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;变为 &lt;strong&gt;って&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;行きます → 行って&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;32-第二类动词-一段动词&#34;&gt;&lt;strong&gt;3.2 第二类动词 (一段动词)&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;规则&lt;/strong&gt;: 直接去掉ます，换成 &lt;strong&gt;て&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范例&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;食べます → 食べて&lt;/li&gt;
&lt;li&gt;起きます → 起きて&lt;/li&gt;
&lt;li&gt;見ます → 見て&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;33-第三类动词-不规则动词&#34;&gt;&lt;strong&gt;3.3 第三类动词 (不规则动词)&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;します → して&lt;/li&gt;
&lt;li&gt;来ます (きます) → 来て (きて)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-て形的核心用法连接顺序动作&#34;&gt;4. て形的核心用法：连接顺序动作
&lt;/h3&gt;&lt;h4 id=&#34;41-句型结构&#34;&gt;&lt;strong&gt;4.1 句型结构&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;动词1-て形, 动词2-ます/ました/ません/ませんでした。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;: 表示先做完动作1，然后再做动作2。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时态&lt;/strong&gt;: 整句话的时态、肯定/否定完全由&lt;strong&gt;句末最后一个动词&lt;/strong&gt;的形式决定。て形本身不带时态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;42-范例&#34;&gt;&lt;strong&gt;4.2 范例&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原句&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;A: デパートへ行きます。 (去百货商店。)&lt;/li&gt;
&lt;li&gt;B: 靴を買います。 (买鞋。)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合并 (现在/将来时)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;デパートへ行って、靴を買います。 (去百货商店买鞋。)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合并 (过去时)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;デパートへ行って、靴を買いました。 (去了百货商店买了鞋。)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-今日出现的新词汇&#34;&gt;5. 今日出现的新词汇
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;デパート: 百货商店&lt;/li&gt;
&lt;li&gt;靴 (くつ): 鞋&lt;/li&gt;
&lt;li&gt;買います (かいます): 买&lt;/li&gt;
&lt;li&gt;会います (あいます): 遇见&lt;/li&gt;
&lt;li&gt;待ちます (まちます): 等待&lt;/li&gt;
&lt;li&gt;死にます (しにます): 死&lt;/li&gt;
&lt;li&gt;書きます (かきます): 写&lt;/li&gt;
&lt;li&gt;泳ぎます (およぎます): 游泳&lt;/li&gt;
&lt;li&gt;話します (はなします): 说话&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;day-3&#34;&gt;Day 3
&lt;/h1&gt;</description>
        </item>
        <item>
        <title>How to write Hugo Stack articles?</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/p/how-to-write-hugo-stack-articles/</link>
        <pubDate>Tue, 23 Sep 2025 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/p/how-to-write-hugo-stack-articles/</guid>
        <description>&lt;h3 id=&#34;页面包组织&#34;&gt;页面包组织
&lt;/h3&gt;&lt;p&gt;通常，一篇文章只有一个 Markdown 文件（例如 &lt;code&gt;my-first-post.md&lt;/code&gt;）。但如果想给这篇文章配图，就需要把图片和 Markdown 文件放在同一个文件夹里，然后将这个文件夹作为一个“页面包”来处理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;页面包&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── post
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── my-first-post
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── index.md  # 关键：内容文件名为 index.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ├── image1.png
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        └── image2.png
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在这个结构中，&lt;code&gt;my-first-post&lt;/code&gt; 文件夹就是一个页面包。Hugo 会把这个文件夹里的所有文件（包括 &lt;code&gt;index.md&lt;/code&gt; 和所有图片）都看作是 &lt;code&gt;my-first-post&lt;/code&gt; 这篇文章的一部分。&lt;code&gt;index.md&lt;/code&gt; 是这个页面的主要内容文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;插入图片&#34;&gt;插入图片
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;### 插入单张图片
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;这是第一张图片，展示了我的工作环境：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![我的工作环境](image1.jpg)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;### 插入多张图片（图片库）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;通过在页面包中放入多张图片并用 Markdown 语法列出它们，Stack 主题可以自动生成图片库。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![这是一张图片](image1.jpg)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![这是另一张图片](image2.png)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Archives</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>About</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/about/</link>
        <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/about/</guid>
        <description>&lt;p&gt;还没有想好写什么，暂定。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Links</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/links/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/links/</guid>
        <description>&lt;p&gt;To use this feature, add &lt;code&gt;links&lt;/code&gt; section to frontmatter.&lt;/p&gt;
&lt;p&gt;This page&amp;rsquo;s frontmatter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub is the world&amp;#39;s largest software development platform.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://www.typescriptlang.org&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ts-logo-128.jpg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;image&lt;/code&gt; field accepts both local and external images.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Search</title>
        <link>https://lazy30090.github.io/Hugo-stack-lazymuse/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://lazy30090.github.io/Hugo-stack-lazymuse/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
