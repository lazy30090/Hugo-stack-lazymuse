[{"content":"《计算机组成原理》 ","date":"2025-10-10T00:00:00Z","permalink":"https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-part-ii/","title":"Computer Organization Note Part II"},{"content":"《计算机组成原理》概论 1. 计算机系统的基本组成与特点 1.1 电子数字计算机的基本组成 电子计算机是一种能够自动、高速、精确地对数字信息进行存储、计算以及输出的电子设备。其基本组成包括五大部件：\n运算器 (Arithmetic Unit): 执行算术和逻辑运算。 控制器 (Control Unit): 计算机的指挥中心，负责协调各个部件工作。 存储器 (Memory): 用于存放数据和程序。 输入设备 (Input Device): 将外部信息（如程序、数据）转换成计算机能识别的形式并输入。 输出设备 (Output Device): 将计算机处理的结果以人类可识别的形式（如文字、图像）展现出来。 数据流: 计算机加工处理的对象（数据）。 控制流: 控制计算机工作的信息（指令）。\n1.2 信息的数字化表示 数字代码表示: 计算机内部的所有信息（包括数据和指令）都使用二进制数字代码来表示。 数据: 数值（5 -\u0026gt; 0 101）、字符（A -\u0026gt; 1000001）。 命令/状态: 启动、停止等。 物理信号表示: 模拟信号: 随时间连续变化的信号，存在精度低、抗干扰能力弱等问题。 数字信号: 在时间或空间上断续变化的信号，计算机采用数字信号来表示二进制代码。 电平信号: 用高、低两种电平状态表示 1 和 0，适合并行操作。 脉冲信号: 用脉冲的有无表示 1 和 0，适合串行操作。 1.3 存储程序与冯·诺依曼体制 存储程序方式: 将预先编写好的程序和数据存入计算机存储器中，然后启动计算机，使其能够自动、连续地执行程序指令。 工作流程: 编写程序 -\u0026gt; 输入程序 -\u0026gt; 存储程序 -\u0026gt; 执行指令 -\u0026gt; 输出结果。 自动执行: 通过 程序计数器 (PC) 来自动存取和执行指令。 冯·诺依曼体系结构核心思想: 二进制表示: 程序和数据都用二进制代码表示。 存储程序: 将程序和数据一同存放在存储器中，计算机能自动执行。 五大部件: 计算机硬件由运算器、控制器、存储器、输入设备和输出设备五部分组成。 1.4 数字计算机的特点 能在程序控制下自动连续工作。 运算速度快。 运算精度高。 具有很强的信息存储能力。 通用性强。 2. 计算机系统的硬件组成 2.1 硬件系统基本组成模型 现代计算机硬件系统通常以CPU为核心，通过系统总线连接主存储器（M）、输入输出设备（I/O）及其接口。\nCPU (中央处理器): 由运算器、控制器和寄存器组构成。 各部件功能 运算器: 功能: 执行算术运算和逻辑运算。 组成: 算术逻辑单元(ALU)、通用寄存器组、移位器等。 控制器: 功能: 根据指令信息、状态信息和时序信号，产生控制微命令，控制整个计算机的操作。 组成: 微命令发生器等。 存储器: 功能: 存储二进制的数据和程序。 三级存储体系: 为平衡速度、容量和成本，采用 Cache -\u0026gt; 主存 -\u0026gt; 外存 的层次结构。 输入/输出设备 (I/O设备): 功能: 实现信息的转换。输入设备将原始信息转为内部代码，输出设备将处理结果代码转为人类可识别的形式。 总线 (Bus): 功能: 为多个部件分时共享的信息传送线路。 分类: 数据总线 (DB): 传送数据信息。 地址总线 (AB): 指定信息来源或目的地址。 控制总线 (CB): 管理和控制总线活动。 接口 (Interface): 功能: 主机与外设之间的连接逻辑，负责缓冲、转换和控制外设的I/O操作。 3. 计算机系统的软件组成 3.1 软件分类 系统程序: 负责系统管理、调度和提供服务，如操作系统、语言处理程序、数据库管理系统等。 应用程序: 为解决特定应用问题而编制的程序，如设计软件、办公软件等。 3.2 软硬件系统层次结构 计算机系统是一个多层次的结构，从底层硬件到上层应用软件，层层构建。\n硬件部分: 硬件逻辑级、微程序级。 软硬分界面: 传统机器级（指令系统）。 软件部分: 操作系统级、语言处理程序级、应用程序级等。 3.3 编程语言与处理程序 编程语言: 机器语言: 计算机唯一能直接执行的二进制代码语言。 汇编语言: 使用助记符（如 ADD, SUB）表示机器指令。 高级语言: 类似自然语言，易于编写和理解。 语言处理程序: 汇编程序: 将汇编语言翻译成机器语言。 翻译程序: 将高级语言翻译成机器语言。 编译程序: 一次性将整个源程序翻译成目标程序，然后执行目标程序。 解释程序: 翻译一条源程序语句就立即执行一条，不生成独立的目标文件。 4. 计算机系统的性能指标 基本字长: 计算机一次定点运算所能处理的二进制位数（如32位、64位），影响计算精度。 时钟频率: 外频 (基频): 系统总线的工作频率。 CPU主频: CPU主频 = 外频 × 倍频系数。主频越高，运算速度越快。 运算速度: CPI (Clock-cycle Per Instruction): 执行一条指令所需的平均时钟周期数。 IPS (Instructions Per Second): 每秒执行的指令条数。 FLOPS (Floating-point Operations Per Second): 每秒执行的浮点运算次数。 数据传输率 (带宽): 定义: 数据总线每秒传送的数据量（单位: B/S）。 公式: 数据传输率 = (数据通路宽度 × 总线时钟频率) / 8 存储器容量: 主存容量: 主存容量 = 编址的存储单元个数 × 存储单元宽度。由地址总线位数决定可寻址空间。 外存容量: 通常指硬盘、SSD等存储设备的总容量，与地址总线无关。 硬盘格式化容量: 面数 × (道数/面) × (扇区数/道) × (字节数/扇区) 5. 本章小结与思考 重点内容 冯诺依曼体系的三大核心思想。 存储程序的工作方式原理。 计算机硬件系统的五大基本组成及其功能。 计算机性能指标的定义与计算：基本字长、主频、CPI、IPS、FLOPS、数据传输率。 思考题 计算机如何区分同样由0和1代码组成的 数据 和 指令？ 提示: 计算机通过不同的 时间 和 空间 来区分。在取指令阶段（由控制器控制）从存储器取出的就是指令；在执行指令阶段（由指令指定）访问存储器得到的就是数据。 ","date":"2025-10-09T00:00:00Z","permalink":"https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-part-i/","title":"Computer Organization Note Part I"},{"content":"计算机性能指标计算详解与实例 为了更好地评估一台计算机的性能，我们会使用一系列量化指标。理解这些指标的计算方法是掌握计算机组成原理的关键。下面我们将逐一解析您提到的几个重要性能指标。\n1. CPU主频 (CPU Clock Speed) 文字描述: CPU主频是衡量CPU运算速度的一个重要指标，它表示CPU内部的时钟信号频率。但CPU并不是直接连接到系统的一个固定频率时钟上，而是通过一个“倍频”技术来实现的。系统主板提供一个基础频率，称为外频 (Front Side Bus, FSB)，CPU内部再将这个外频乘以一个倍数（倍频系数），得到的就是CPU最终的工作频率，即主频。\n计算公式:\nCPU主频=外频×倍频系数\n单位:\n频率的单位是赫兹 (Hz)。 常用的单位有兆赫兹 (MHz, 106 Hz) 和吉赫兹 (GHz, 109 Hz)。 计算实例: 假设某台计算机的主板外频为 100 MHz，其CPU的倍频系数为 32。\n计算过程: CPU主频 = 100 MHz × 32 = 3200 MHz 结果: 这颗CPU的主频是 3200 MHz，也就是 3.2 GHz。 2. 运算速度 (CPI, IPS/MIPS) 2.1 平均CPI (Cycles Per Instruction) 文字描述: CPI指的是“执行每条指令所需的平均时钟周期数”。为什么是平均值呢？因为计算机指令的类型有很多（如数据传输、算术运算、逻辑运算等），不同类型的指令执行起来的复杂程度不同，所需要的时间（时钟周期）也不同。因此，我们需要根据一个程序中各类指令的占比来计算一个加权平均值。\n计算公式:\n平均CPI=i=1∑n(第 i 类指令的CPI×其在程序中的占比)\n计算实例 (源自您的PPT): 假设一个程序包含四类指令，其CPI和占比如下表所示：\n指令类型 在程序中的占比 该类指令的CPI 传输类指令 40% 15 双操作数指令 30% 20 单操作数指令 20% 15 转移类指令 10% 10 计算过程: 平均CPI = (15 × 0.40) + (20 × 0.30) + (15 × 0.20) + (10 × 0.10) 平均CPI = 6 + 6 + 3 + 1 = 16 结果: 执行该程序时，CPU平均执行一条指令需要 16 个时钟周期。 2.2 IPS / MIPS (Instructions Per Second) 文字描述: IPS指的是“每秒钟能执行多少条指令”。这个指标结合了CPU的主频和平均CPI，能更全面地反映CPU的运算速度。因为主频高但执行每条指令耗时（CPI高）的CPU，其整体性能不一定强。MIPS则是指“每秒百万条指令”。\n计算公式:\nIPS=平均CPICPU主频\nMIPS=106IPS=平均CPI主频 (MHz)\n计算实例: 我们沿用上面的例子，假设CPU主频为 3.2 GHz (即 3200 MHz 或 3.2×109 Hz)，计算出的平均CPI为 16。\n计算过程 (IPS): IPS = (3.2 × 10^9 Hz) / 16 = 200,000,000 条指令/秒 计算过程 (MIPS): MIPS = (3200 MHz) / 16 = 200 结果: 该CPU的运算速度为 2亿条指令/秒，或者说 200 MIPS。 3. 数据传输率 (Data Transfer Rate / Bandwidth) 文字描述: 数据传输率，也叫带宽，衡量的是计算机中总线（连接各个部件的数据通道）传输数据的能力，即每秒钟能够传输多少字节的数据。它主要取决于两个因素：数据总线的宽度（一次能同时传输多少位数据）和总线的时钟频率（一秒钟能传输多少次）。\n计算公式:\n数据传输率 (B/s)=8数据总线宽度 (bit)×总线时钟频率 (Hz)\n注意: 公式中的 8 是因为 1 Byte = 8 bits，用于将 bit/s 转换为 Byte/s。\n计算实例: 假设某计算机的数据总线宽度为 64位 (bit)，总线时钟频率（外频）为 800 MHz (即 800×106 Hz)。\n计算过程: 数据传输率 = (64 bit × 800,000,000 Hz) / 8 数据传输率 = 8 × 800,000,000 B/s = 6,400,000,000 B/s 结果: 该总线的数据传输率为 6,400,000,000 B/s，也就是 6400 MB/s 或 6.4 GB/s。 4. 硬盘格式化容量 (Formatted Hard Drive Capacity) 文字描述: 这个公式用于计算老式机械硬盘（HDD）的存储容量。硬盘由多个盘片（面）组成，每个盘面上有很多同心圆，称为磁道，每个磁道又被划分为若干个扇区，扇区是数据读写的最小单位。总容量就是将所有扇区的容量加起来。\n计算公式:\n格式化容量=磁头数(面数)×面磁道数×道扇区数×扇区字节数\n计算实例: 假设一个硬盘有以下参数：\n磁头数 (面数): 4 个 (通常一个盘片有2个面) 每个面的磁道数: 1024 个 每个磁道的扇区数: 63 个 每个扇区的字节数: 512 Bytes 计算过程: 总容量 = 4 (面) × 1024 (道/面) × 63 (扇区/道) × 512 (字节/扇区) 总容量 = 132,120,576 Bytes 结果与单位换算: 132,120,576 Bytes / 1024 = 129,024 KB (千字节) 129,024 KB / 1024 ≈ 126 MB (兆字节) 所以，这个硬盘的格式化容量大约是 126 MB。 ","date":"2025-10-09T00:00:00Z","permalink":"https://lazy30090.github.io/Hugo-stack-lazymuse/p/computer-organization-note-special-i/","title":"Computer Organization Note Special I"},{"content":"Day 1 1. 动词时态：过去式 1.1 规则 日语动词的礼貌体 (ます形) 本身可以表达现在习惯或将来的动作。为了描述过去已经发生的动作，需要将词尾进行变换。\n肯定句 (做了某事): 将词尾的 ます 变为 ました。 否定句 (没做某事): 将词尾的 ません 变为 ませんでした。 1.2 范例 将来: 明日、パンを食べます。 过去: 昨日、パンを食べました。 将来否定: 明日、学校へ行きません。 过去否定: 昨日、学校へ行きませんでした。 1.3 相关词汇 今日 (きょう): 今天 昨日 (きのう): 昨天 明日 (あした): 明天 2. 形容词系统 2.1 核心概念：为何分为两类？ 日语的形容词分为 い形容词 和 な形容词 两大类，是因为它们的词源和语法功能完全不同。\nい形容词: 是日语的“原生词汇”，自古以来就作为形容词使用，拥有类似动词的“活用”能力，即词尾本身可以变化来表达否定、过去等含义。 な形容词: 大多是源于中文的“汉字词”，本质上更像名词。它们自身无法变化，需要借助助词 な 或助动词 です 来发挥形容词的功能。 2.2 两类形容词的用法区别 场景 い形容词 な形容词 直接修饰名词 直接连接 おいしいパン 中间加 な 静かな図書館 在句末作谓语 自身可独立 (です只为表礼貌) この映画は面白い。 必须和です/だ连用 図書館は静かです。 2.3 活用/变形规则详解 类型 时态 肯定 否定 い形容词 (例: 面白い) 现在 面白いです 面白くないです 过去 面白かったです 面白くなかったです な形容词 (例: 静か) 现在 静かです 静かじゃありません 过去 静かでした 静かじゃありませんでした 2.4 相关词汇 い形容词: おいしい: 好吃的 高い (たかい): 贵的, 高的 新しい (あたらしい): 新的 面白い (おもしろい): 有趣的 な形容词: 元気 (げんき): 健康的, 有活力的 きれい: 漂亮的, 干净的 静か (しずか): 安静的 有名 (ゆうめい): 有名的 名词及其他: この: 这个 映画 (えいが): 电影 図書館 (としょかん): 图书馆 3. 助词 で 与 に 3.1 助词 で 功能一：表示动作发生的场所 讲解: で 用于标记一个动作在“哪里”发生，是动作的“舞台”。需要和表示移动目的地的 へ 区分。 范例: 私 は 図書館 で 勉強します。 - 我在图书馆学习。 功能二：表示方法、手段、工具 讲解: で 用于标记完成一个动作所使用的“工具”或“方法”。 范例: バス で 会社 へ 行きます。 - 我坐巴士去公司。 3.2 助词 に 功能：标记动作发生的具体时间点 讲解: に 像一个图钉，把动作精确地“钉”在某个时间点上，通常是带有数字的时间。 范例: 朝、7時 に 起きます。 - 我早上在7点起床。 重要提示: 相对时间词如 今日 (今天), 昨日 (昨天) 等后面不加 に。 3.3 相关词汇 勉強します (べんきょうします): 学习 バス: 巴士 箸 (はし): 筷子 7時 (しちじ): 7点 起きます (おきます): 起床 カフェ: 咖啡馆 コーヒー: 咖啡 4. 提问与回答 4.1 使用疑问词提问 讲解: 用疑问词替换掉你想提问的部分，句末保留 か。 范例: 原句: カフェでコーヒーを飲みます。 问地点: どこでコーヒーを飲みますか。 问对象: カフェで何を食べますか。 4.2 疑问词词汇 何 (なに/なん): 什么 どこ: 哪里 いつ: 何时 誰 (だれ): 谁 Day 2 1. 存在动词：あります \u0026amp; います 1.1 核心概念 日语在表达“有”或“在”的概念时，会根据主体的性质使用两个不同的动词。\nあります: 用于非生命体 (物品、植物、抽象概念等)。 います: 用于生命体 (人、动物等)。 1.2 句型一：描述存在 (Location) 结构: 场所 に 主体 が あります / います。\n助词 に: 在此句型中，表示主体存在的地点。 助词 が: 用于引出首次被提及或作为存在焦点的主体。 范例:\n非生命体: 机の上に本があります。 (桌子上有书。) 生命体: 公園に子供がいます。 (公园里有小孩。) 1.3 句型二：描述拥有 (Possession) 结构: 拥有者 は 所有物 が あります / います。\n范例:\n拥有物品: 私は車があります。 (我有一辆车。) 拥有生命: 私は猫がいます。 (我有一只猫。) 1.4 疑问形式 疑问词疑问句 用疑问词替换想提问的部分，句末保留 か。\n提问非生命体 (用 何 なに) 问句: 冷蔵庫の中に何がありますか。 (冰箱里有什么？) 提问生命体 (用 誰 だれ) 问句: 教室に誰がいますか。 (教室里有谁？) 1.5 相关词汇 机 (つくえ): 桌子 上 (うえ): 上面 本 (ほん): 书 公園 (こうえん): 公园 子供 (こども): 小孩 車 (くるま): 车 猫 (ねこ): 猫 冷蔵庫 (れいぞうこ): 冰箱 中 (なか): 里面 卵 (たまご): 鸡蛋 犬 (いぬ): 狗 椅子 (いす): 椅子 下 (した): 下面 教室 (きょうしつ): 教室 先生 (せんせい): 老师 动词て形 (Te-Form) 1. て形的核心概念 动词的て形 (Te-Form) 是日语语法中的一个核心变形，它本身不表示时态或礼貌程度。其主要功能是作为“连接器”，将句子中的各个部分连接起来，实现更复杂的表达。\n其主要用途包括：\n连接有时序关系的多个动作 (本次学习重点) 请求或许可 (例: 食べてください - 请吃) 描述持续的状态 (例: 知っています - 我知道) 说明原因或方式 掌握て形是日语能力从中级向高级迈进的关键一步。\n2. 前置步骤：动词分类 要正确地将动词变为て形，必须先准确判断其所属类别。日语动词根据其ます形的构成，可分为三类。\n2.1 动词分类诊断流程 第一步：判断是否为“第三类动词” (不规则动词) 第三类动词只有两个，以及由它们构成的复合动词。\nします: (做) 来ます (きます): (来) 复合动词: 所有以“名词+します”构成的动词，如 勉強します (学习), 買い物します (购物) 等。 第二步：观察ます前的假名元音，区分第一类与第二类\n若动词不属于第三类，则观察ます前的假名。\n如果元音为 え (e段音): 该动词 必定为第二类动词。 例: 食べます (たべます), 教えます (おしえます), 寝ます (ねます)。 如果元音为 い (i段音): 该动词可能是第一类，也可能是第二类。这是需要重点区分的区域。 判断方法: 大部分情况下是第一类动词。但需记住少数例外，这些例外属于第二类动词。 【例外】须特殊记忆的第二类动词 (ます前为い段音) 以下动词虽然形式上符合第一类特征，但实际属于第二类，其变化规则遵循第二类动词。\n見ます (みます): 看 起きます (おきます): 起床 います: 在 (生命体) 浴びます (あびます): 淋浴 降ります (おります): 下 (车、山等) 借ります (かります): 借入 できます: 能够、会 過ぎます (すぎます): 经过、过度 着ます (きます): 穿 (上半身衣物) 第三步：得出结论 如果一个ます前为い段音的动词不在上述例外列表中，那么它就是第一类动词。\n例: 書きます (かきます), 飲みます (のみます), 会います (あいます) 均为第一类。 2.2 动词分类流程图 1 2 3 4 5 6 7 8 9 [新动词] ↓ 是 します/来ます 吗? --(是)--\u0026gt; [第三类动词] ↓ (否) ます前的元音是 え 吗? --(是)--\u0026gt; [第二类动词] ↓ (否, 元音必为 い) 在“例外列表”中吗? --(是)--\u0026gt; [第二类动词] ↓ (否) [第一类动词] 3. て形变化规则 3.1 第一类动词 (五段动词) ます前的假名 变化规则 范例 (ます形 → て形) い, ち, り 变为 って 会います → 会って / 待ちます → 待って み, に, び 变为 んで 飲みます → 飲んで / 死にます → 死んで き 变为 いて 書きます → 書いて ぎ 变为 いで 泳ぎます → 泳いで し 变为 して 話します → 話して 特殊例外: 行きます 变为 って 行きます → 行って 3.2 第二类动词 (一段动词) 规则: 直接去掉ます，换成 て。 范例: 食べます → 食べて 起きます → 起きて 見ます → 見て 3.3 第三类动词 (不规则动词) します → して 来ます (きます) → 来て (きて) 4. て形的核心用法：连接顺序动作 4.1 句型结构 动词1-て形, 动词2-ます/ました/ません/ませんでした。\n功能: 表示先做完动作1，然后再做动作2。 时态: 整句话的时态、肯定/否定完全由句末最后一个动词的形式决定。て形本身不带时态。 4.2 范例 原句: A: デパートへ行きます。 (去百货商店。) B: 靴を買います。 (买鞋。) 合并 (现在/将来时): デパートへ行って、靴を買います。 (去百货商店买鞋。) 合并 (过去时): デパートへ行って、靴を買いました。 (去了百货商店买了鞋。) 5. 今日出现的新词汇 デパート: 百货商店 靴 (くつ): 鞋 買います (かいます): 买 会います (あいます): 遇见 待ちます (まちます): 等待 死にます (しにます): 死 書きます (かきます): 写 泳ぎます (およぎます): 游泳 話します (はなします): 说话 Day 3 ","date":"2025-09-30T00:00:00Z","permalink":"https://lazy30090.github.io/Hugo-stack-lazymuse/p/japanese-note/","title":"Japanese Note"},{"content":"页面包组织 通常，一篇文章只有一个 Markdown 文件（例如 my-first-post.md）。但如果想给这篇文章配图，就需要把图片和 Markdown 文件放在同一个文件夹里，然后将这个文件夹作为一个“页面包”来处理。\n页面包：\n1 2 3 4 5 6 content └── post └── my-first-post ├── index.md # 关键：内容文件名为 index.md ├── image1.png └── image2.png 在这个结构中，my-first-post 文件夹就是一个页面包。Hugo 会把这个文件夹里的所有文件（包括 index.md 和所有图片）都看作是 my-first-post 这篇文章的一部分。index.md 是这个页面的主要内容文件。\n插入图片 1 2 3 4 5 6 7 8 9 10 11 ### 插入单张图片 这是第一张图片，展示了我的工作环境： ![我的工作环境](image1.jpg) ### 插入多张图片（图片库） 通过在页面包中放入多张图片并用 Markdown 语法列出它们，Stack 主题可以自动生成图片库。 ![这是一张图片](image1.jpg) ![这是另一张图片](image2.png) ","date":"2025-09-23T00:00:00Z","permalink":"https://lazy30090.github.io/Hugo-stack-lazymuse/p/how-to-write-hugo-stack-articles/","title":"How to write Hugo Stack articles?"}]