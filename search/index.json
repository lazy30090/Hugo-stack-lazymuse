[{"content":"Day 1 1. 动词时态：过去式 1.1 规则 日语动词的礼貌体 (ます形) 本身可以表达现在习惯或将来的动作。为了描述过去已经发生的动作，需要将词尾进行变换。\n肯定句 (做了某事): 将词尾的 ます 变为 ました。 否定句 (没做某事): 将词尾的 ません 变为 ませんでした。 1.2 范例 将来: 明日、パンを食べます。 过去: 昨日、パンを食べました。 将来否定: 明日、学校へ行きません。 过去否定: 昨日、学校へ行きませんでした。 1.3 相关词汇 今日 (きょう): 今天 昨日 (きのう): 昨天 明日 (あした): 明天 2. 形容词系统 2.1 核心概念：为何分为两类？ 日语的形容词分为 い形容词 和 な形容词 两大类，是因为它们的词源和语法功能完全不同。\nい形容词: 是日语的“原生词汇”，自古以来就作为形容词使用，拥有类似动词的“活用”能力，即词尾本身可以变化来表达否定、过去等含义。 な形容词: 大多是源于中文的“汉字词”，本质上更像名词。它们自身无法变化，需要借助助词 な 或助动词 です 来发挥形容词的功能。 2.2 两类形容词的用法区别 场景 い形容词 な形容词 直接修饰名词 直接连接 おいしいパン 中间加 な 静かな図書館 在句末作谓语 自身可独立 (です只为表礼貌) この映画は面白い。 必须和です/だ连用 図書館は静かです。 2.3 活用/变形规则详解 类型 时态 肯定 否定 い形容词 (例: 面白い) 现在 面白いです 面白くないです 过去 面白かったです 面白くなかったです な形容词 (例: 静か) 现在 静かです 静かじゃありません 过去 静かでした 静かじゃありませんでした 2.4 相关词汇 い形容词: おいしい: 好吃的 高い (たかい): 贵的, 高的 新しい (あたらしい): 新的 面白い (おもしろい): 有趣的 な形容词: 元気 (げんき): 健康的, 有活力的 きれい: 漂亮的, 干净的 静か (しずか): 安静的 有名 (ゆうめい): 有名的 名词及其他: この: 这个 映画 (えいが): 电影 図書館 (としょかん): 图书馆 3. 助词 で 与 に 3.1 助词 で 功能一：表示动作发生的场所 讲解: で 用于标记一个动作在“哪里”发生，是动作的“舞台”。需要和表示移动目的地的 へ 区分。 范例: 私 は 図書館 で 勉強します。 - 我在图书馆学习。 功能二：表示方法、手段、工具 讲解: で 用于标记完成一个动作所使用的“工具”或“方法”。 范例: バス で 会社 へ 行きます。 - 我坐巴士去公司。 3.2 助词 に 功能：标记动作发生的具体时间点 讲解: に 像一个图钉，把动作精确地“钉”在某个时间点上，通常是带有数字的时间。 范例: 朝、7時 に 起きます。 - 我早上在7点起床。 重要提示: 相对时间词如 今日 (今天), 昨日 (昨天) 等后面不加 に。 3.3 相关词汇 勉強します (べんきょうします): 学习 バス: 巴士 箸 (はし): 筷子 7時 (しちじ): 7点 起きます (おきます): 起床 カフェ: 咖啡馆 コーヒー: 咖啡 4. 提问与回答 4.1 使用疑问词提问 讲解: 用疑问词替换掉你想提问的部分，句末保留 か。 范例: 原句: カフェでコーヒーを飲みます。 问地点: どこでコーヒーを飲みますか。 问对象: カフェで何を食べますか。 4.2 疑问词词汇 何 (なに/なん): 什么 どこ: 哪里 いつ: 何时 誰 (だれ): 谁 ","date":"2025-09-30T00:00:00Z","permalink":"https://lazy30090.github.io/Hugo-stack-lazymuse/p/japanese-note/","title":"Japanese Note"},{"content":"《计算机组成原理》第一章 1.1 计算机的基本概念 1.1.1 信息的数字化表示 1. 基础：二进制系统 计算机内部的所有信息（数值、字符、图像、声音等）都必须转换为二进制序列进行存储和处理。选择二进制是基于以下三个根本原因：\n物理实现的简易性：电子元器件（如晶体管）稳定地表示两种状态（如高/低电平、开/关）远比表示多种状态（如十进制的10种）更容易、可靠且成本更低。 运算规则的简单性：二进制的算术运算（加法、乘法）规则极少，这使得构建运算器（ALU）的逻辑电路设计大大简化。 与逻辑运算的天然契合：逻辑代数中的“真”和“假”两种状态，与二进制的“1”和“0”可以完美对应，为计算机处理逻辑判断提供了统一的基础。 2. 基本单位 位 (bit)：二进制数中的一位，是计算机中信息的最小单位。 字节 (Byte)：8个比特构成一个字节，是信息存储和传输的基本单位。1 Byte = 8 bits。 3. 各类信息的表示 数值信息：采用“按权展开”法表示。一个二进制数中，任意位置上的“1”所代表的数值是2的相应次幂。 非数值信息（字符）：通过编码 (Encoding) 方案，将字符与一个唯一的二进制数进行映射。 ASCII (美国信息交换标准代码)：使用7位（后扩展为8位，即1字节）二进制数表示128（或256）个英文字符、数字和符号。这是最基础的西文编码方案。 Unicode 与 UTF-8：为解决ASCII无法表示多国语言文字的问题而诞生。 Unicode：一个全球统一的字符集，为世界上每一种语言的每一个字符都分配了一个唯一的数字编号（码点）。 UTF-8：一种编码规则，它将Unicode码点转换为实际存储的二进制序列。其特点是可变长度编码，对ASCII字符用1字节表示（实现兼容），对汉字等常用字符用3字节表示，从而兼顾了空间效率和通用性。 图像信息： 像素化：将图像分割为一个个像素点阵。 颜色编码：用二进制数记录每个像素的颜色信息。例如，24位真彩色使用3个字节（R/G/B各8位）表示一个像素的颜色，可表示约1677万种颜色。 声音信息：将连续的模拟声波数字化。 采样：在时间轴上以固定频率测量声波的振幅。 量化：将每次采样得到的振幅值近似为一个离散的整数，并用二进制编码。 4. 数字代码的物理表示：数字信号 抽象的二进制代码最终需要通过物理信号在硬件电路中传输。\n数字信号：一种离散的、非连续的信号，其状态（如电压）在预定义的几个值之间跳变。对于二进制系统，信号只有两种状态。 电平表示：通过电路中的电压高低来对应二进制的1和0。例如，高电平（+3.3V）代表1，低电平（0V）代表0。 时序传输：在计算机内部**时钟 (Clock)**信号的驱动下，二进制序列按位（bit）在信号线上传输。在每个时钟周期内，发送方输出一个高电平或低电平，接收方在同一时钟周期的特定时刻检测电平，从而还原出二进制序列。 1.1.2 存储程序工作方式 这是现代计算机体系结构的灵魂，由冯·诺依曼提出，核心思想是：\n将指令和数据以同等地位存放在存储器中，并可按地址寻访。计算机能自动地从存储器中取出指令并执行，直至程序结束。\n这一思想带来了两大革命性变革：\n自动化：计算机可脱离人工干预，高速自动地完成复杂的计算任务。 通用性：计算机的功能不再由其硬件固定，而是取决于加载到内存中的程序。这使得计算机成为一种通用的信息处理工具。 1.1.3 计算机的分类 计算机可从不同维度进行分类：\n按处理能力/规模： 超级计算机：用于尖端科学计算，运算速度极快。 大型机：用于处理大量数据和高并发事务，如银行、航空系统。 服务器：为网络中的其他设备提供服务。 个人计算机 (PC)：通用桌面或便携式计算机。 嵌入式计算机：嵌入到特定设备中，执行专门功能的微型计算机。 按用途： 通用计算机：可解决多种不同类型问题的计算机。 专用计算机：为特定应用领域设计，具有固定功能的计算机。 1.2 计算机的诞生与发展 1.2.1 冯·诺依曼体系结构 这是为实现“存储程序”思想而设计的硬件体系结构，规定计算机必须由五大基本部件组成：\n运算器 (ALU)：执行算术运算和逻辑运算。 控制器 (CU)：负责取指令、分析指令、发出控制信号，是计算机的指挥中心。 中央处理器 (CPU) 通常指运算器和控制器的集合体。 存储器 (Memory)：存放程序和数据。 输入设备：向计算机输入信息（如键盘、鼠标）。 输出设备：向用户展示处理结果（如显示器、打印机）。 核心特点：\n以CPU为核心。 指令和数据不加区分地存放在同一个存储器中。 指令和数据的存取都通过同一条总线进行。 冯·诺依曼瓶颈 (Von Neumann Bottleneck)：\n由于CPU的运算速度远超存储器的访问速度，且指令和数据需共享同一条总线，导致CPU经常处于等待状态，系统整体性能受到存储器和总线速度的严重制约。主要的缓解方法是引入高速缓存 (Cache)，构建存储器层次结构。\n1.2.2 计算机发展历程 计算机的发展以核心电子元器件的变革为标志，通常划分为四代：\n第一代 (1946-1957)：电子管。体积巨大、功耗高、可靠性差。代表：ENIAC。 第二代 (1958-1964)：晶体管。体积、功耗、成本显著降低，可靠性提升。高级语言和操作系统雏形出现。 第三代 (1965-1970)：中小规模集成电路 (IC)。计算机进一步小型化，性能更强。出现系列化计算机。 第四代 (1971-至今)：大规模/超大规模集成电路 (LSI/VLSI)。催生了**微处理器 (Microprocessor)**和个人计算机 (PC) 的革命。 1.2.3 未来的发展趋势 后摩尔定律时代：性能提升从单纯依靠缩小晶体管尺寸，转向依赖更优的架构，如众核架构和领域专用架构 (DSA)（如GPU, NPU）。 新型计算模型：如量子计算、类脑计算/神经形态计算和生物计算，旨在突破冯·诺依曼体系的限制。 计算形态：普适计算和物联网 (IoT)，使计算能力无处不在。 1.3 计算机系统的组织 一个完整的计算机系统由硬件系统和软件系统两部分组成。\n1.3.1 硬件系统 计算机的物理实体集合，是软件运行的基础平台。一个典型的计算机硬件系统由以下主要部分构成：\n中央处理器 (CPU)：计算机的“大脑”，是执行指令和处理数据的核心部件。内部主要包含： 运算器 (ALU)：负责算术运算和逻辑运算。 控制器 (CU)：负责从内存取指令、译码并发出控制信号，指挥各部件协同工作。 寄存器 (Registers)：CPU内部的高速存储单元，用于暂存指令、数据和地址。 存储器系统 (Memory System)：用于存放程序和数据，通常呈层次化结构： 高速缓存 (Cache)：位于CPU和主存之间，容量小但速度极快，用于缓解“冯诺依曼瓶颈”。 主存储器 (Main Memory)：也称内存（RAM），是CPU能直接访问的存储空间，程序和数据在运行时必须调入内存。特点是易失性（断电后数据丢失）。 辅助存储器 (Secondary Storage)：也称外存，如硬盘(HDD)、固态硬盘(SSD)，用于长期存储数据和程序。特点是非易失性（断电后数据不丢失）。 主板 (Motherboard)：一块大型电路板，是连接计算机所有硬件组件的骨架。它承载了CPU、内存插槽、扩展插槽（如PCIe），并提供了连接硬盘、电源和各种外部设备的接口。 输入输出（I/O）设备：计算机与外部世界交互的桥梁。 输入设备：用于向计算机输入信息，如键盘、鼠标、扫描仪、麦克风。 输出设备：用于向用户展示计算机的处理结果，如显示器、打印机、音箱。 总线 (Bus)：连接各个硬件部件并为其提供数据交换路径的公共通信干线。根据传输信息的不同，可分为： 数据总线 (Data Bus)：双向传输数据。 地址总线 (Address Bus)：单向传输，由CPU发出，用于指定访存或I/O端口的地址。 控制总线 (Control Bus)：传输控制信号和时序信号。 1.3.2 软件系统 为运行和管理计算机而编制的程序、数据和文档的总称。\n系统软件：管理和控制硬件资源，为应用软件提供运行环境。最核心的是操作系统 (OS)，其他还包括语言处理程序（编译器）、数据库管理系统等。 应用软件：为满足用户特定需求而开发的程序，如办公软件、浏览器、游戏等。 1.3.3 计算机系统层次结构 为了管理计算机的复杂性，计算机系统被组织成一个多层次的结构。每一层都建立在更低一层之上，并向更高一层提供服务，同时隐藏底层实现细节。\n一个典型的简化层次模型如下（从下至上）：\n硬件层：物理设备。 机器语言层：硬件能直接执行的二进制指令。是软硬件的接口，该接口的具体规范称为指令集体系结构 (Instruction Set Architecture, ISA)。 操作系统层：对硬件功能进行抽象和扩展，管理系统资源。 高级语言层：程序员使用的编程语言，由编译器/解释器翻译成机器语言。 应用软件层：用户直接交互的程序。 分层优势：\n解耦 (Decoupling)：实现了软硬件的独立发展。 可移植性 (Portability)：软件可在遵循相同接口的不同硬件上运行。 兼容性 (Compatibility)：新硬件只要遵循旧的ISA，就能运行旧的软件。 1.4 计算机性能的主要评价指标 1. 根本指标：执行时间 完成特定任务所耗费的时间（响应时间）。时间越短，性能越好。\n2. CPU性能公式 一个程序在CPU上的执行时间由以下三个因素决定：\nCPU执行时间 = 指令数 (IC) × 每条指令的平均时钟周期数 (CPI) × 时钟周期时间\n也可以表示为：\nCPU执行时间 = (指令数 × CPI) / 时钟频率\n指令数 (IC)：完成程序所需的机器指令总数。受算法和编译器优化水平影响。 CPI (Cycles Per Instruction)：执行一条指令平均耗费的时钟周期数。反映了CPU微架构的设计水平，是衡量CPU设计优劣的核心指标。 时钟频率 (主频)：CPU的时钟速度，单位Hz。反映了硬件制造工艺水平。 此公式表明，高主频不完全等同于高性能。一个低主频但CPI更低的CPU，其性能可能超过一个高主频但CPI更高的CPU。\n3. 其他常用指标 MIPS (Million Instructions Per Second)：每秒执行百万条指令数。易受指令集复杂度影响，不适合跨架构比较。 FLOPS (Floating-Point Operations Per Second)：每秒执行的浮点运算次数。衡量科学计算性能的关键指标。 基准测试程序 (Benchmark)：通过运行一套标准的、公认的测试程序集（如SPEC），来实际测量并综合评价计算机系统在真实应用场景下的性能，是目前最可靠的性能评价方法。 ","date":"2025-09-30T00:00:00Z","permalink":"https://lazy30090.github.io/Hugo-stack-lazymuse/p/pco-note-part-i/","title":"PCO Note Part I"},{"content":"页面包组织 通常，一篇文章只有一个 Markdown 文件（例如 my-first-post.md）。但如果想给这篇文章配图，就需要把图片和 Markdown 文件放在同一个文件夹里，然后将这个文件夹作为一个“页面包”来处理。\n页面包：\n1 2 3 4 5 6 content └── post └── my-first-post ├── index.md # 关键：内容文件名为 index.md ├── image1.png └── image2.png 在这个结构中，my-first-post 文件夹就是一个页面包。Hugo 会把这个文件夹里的所有文件（包括 index.md 和所有图片）都看作是 my-first-post 这篇文章的一部分。index.md 是这个页面的主要内容文件。\n插入图片 1 2 3 4 5 6 7 8 9 10 11 ### 插入单张图片 这是第一张图片，展示了我的工作环境： ![我的工作环境](image1.jpg) ### 插入多张图片（图片库） 通过在页面包中放入多张图片并用 Markdown 语法列出它们，Stack 主题可以自动生成图片库。 ![这是一张图片](image1.jpg) ![这是另一张图片](image2.png) ","date":"2025-09-23T00:00:00Z","permalink":"https://lazy30090.github.io/Hugo-stack-lazymuse/p/how-to-write-hugo-stack-articles/","title":"How to write Hugo Stack articles?"}]